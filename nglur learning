====================SQL Changes============================================
ALTER TABLE Products
ADD FOREIGN KEY (CategoryID)
REFERENCES Categories(CategoryID)

ALTER TABLE Products
ADD FOREIGN KEY (BrandID)
REFERENCES Brands(BrandID)

ALTER TABLE Products
ADD FOREIGN KEY (SubCategoryID)
REFERENCES SubCategories(SCategoryID)

ALTER TABLE ProductFeatures
ADD FOREIGN KEY (ProductID)
REFERENCES Products(ProductID)

ALTER TABLE ProductImages
ADD FOREIGN KEY (ProductID)
REFERENCES Products(ProductID)

ALTER TABLE ProductPrices
ADD FOREIGN KEY (ProductID)
REFERENCES Products(ProductID)

ALTER TABLE ProductSizeMappings
ADD FOREIGN KEY (ProductID)
REFERENCES Products(ProductID)

============================JSON Changes=================================
in WebAPI config file.

 var json = config.Formatters.JsonFormatter;
            json.SerializerSettings.PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.Objects;
            config.Formatters.Remove(config.Formatters.XmlFormatter);

============================CODE Changes===================================
ProductController

  public class ProductController : ApiController
    {
        // GET api/<controller>
        ProductHelper _productHelper = null;
        public List<ProductModel> Get(bool ActiveOnly=true)
        {

            try
            {
                _productHelper = new ProductHelper();
                return _productHelper.GetAllProducts(ActiveOnly);
            }
            catch (Exception ex)
            {

            }
            finally {
                _productHelper = null;
            }
            return null;
        }

        // GET api/<controller>/5
        public ProductModel Get(Guid id)
        {
            try
            {
                _productHelper = new ProductHelper();
                return _productHelper.GetProductDetail(id);
            }
            catch (Exception ex)
            {

            }
            finally {
                _productHelper = null;
            }
            return null;
        }

        // POST api/<controller>
        public void Post([FromBody]string value)
        {
        }

        // PUT api/<controller>/5
        public void Put(int id, [FromBody]string value)
        {
        }

        // DELETE api/<controller>/5
        public void Delete(int id)
        {
        }
    }

ProductHelper.cs
-------------------

public class ProductHelper
    {
        karrykartEntities _context = null;

        public ProductModel GetProductDetail(Guid Id)
        {
            ProductModel objProduct = null;
            _context = new karrykartEntities();
            var product = _context.Products.Find(Id);
            if ( product!= null)
            {
                objProduct = new ProductModel()
                {
                    Active = product.Active.Value,
                    BrandID = product.BrandID.Value,
                    BrandName = product.Brand.Name,
                    CategoryID = product.CategoryID.Value,
                    CategoryName = product.Category.Name,
                    CreatedBy = product.CreatedBy,
                    CreatedOn = product.CreatedOn.Value,
                    Description = product.Description,
                    Features = product.ProductFeatures.ToList(),
                    Images = product.ProductImages.ToList(),
                    Name = product.Name,
                    Prices = product.ProductPrices.ToList(),
                    ProductID = product.ProductID,
                    ProductSizeMappings = GetProductSizeMapping(_context, product),
                    ShippingDetails = product.ProductShippings.ToList(),
                    SubCategoryID = product.SubCategoryID.Value,
                    SubCategoryName = product.Subcategory.Name,
                    UpdatedBy = product.UpdatedBy,
                    UpdatedOn = product.UpdatedOn.Value
                };
            }
            _context = null;
            return objProduct;
        }

        public List<ProductModel> GetAllProducts(bool ActiveOnly = true)
        {
            _context = new karrykartEntities();
            List<Guid> productIDs = null;
            List<ProductModel> lstProducts = null;
            if(ActiveOnly)
             productIDs = _context.Products.Where(x => x.Active == ActiveOnly).Select(x => x.ProductID).ToList();
            else
             productIDs = _context.Products.Select(x => x.ProductID).ToList();

            if(productIDs.Count>0)
            {
                lstProducts = new List<ProductModel>();
                foreach (var id in productIDs)
                {
                    lstProducts.Add(GetProductDetail(id));
                }
            }
            productIDs = null;

            return lstProducts;
        }

        private List<ProductSize> GetProductSizeMapping(karrykartEntities context, Product product)
        {
            List<ProductSize> lstProductSizeMapping = new List<ProductSize>(); ProductSize objSizeMapping = null;
            foreach (var productSize in product.ProductSizeMappings)
            {
                objSizeMapping = new ProductSize()
                {
                    ProductID = product.ProductID,
                    SizeID = productSize.SizeID,
                    ProductSizeMappingID = productSize.ProductSizeMappingID,
                    Stock = productSize.Stock,
                    UnitID = productSize.UnitID
                };

                objSizeMapping.SizeName = context.Sizes.Where(x => x.SizeID == productSize.SizeID).FirstOrDefault().Name;
                objSizeMapping.SizeTypeID = context.Sizes.Where(x => x.SizeID == productSize.SizeID).FirstOrDefault().SizeTypeID.Value;
                objSizeMapping.SizeTypeName = context.SizeTypes.Where(x => x.SizeTypeID == objSizeMapping.SizeTypeID).FirstOrDefault().Name;
                lstProductSizeMapping.Add(objSizeMapping);
                objSizeMapping = null;
            }
            return lstProductSizeMapping;
        }

        
    }


ProductModel.cs
----------------------------

public class ProductModel
    {

        public Guid ProductID { get; set; }

        public string Name { get; set; }

        public string Description { get; set; }

        public int CategoryID { get; set; }

        public string CategoryName { get; set; }

        public int BrandID { get; set; }

        public string BrandName { get; set; }

        public int SubCategoryID { get; set; }

        public string SubCategoryName { get; set; }

        public DateTime CreatedOn { get; set; }

        public DateTime UpdatedOn { get; set; }

        public string CreatedBy { get; set; }

        public string UpdatedBy { get; set; }

        public bool Active { get; set; }

        public List<ProductFeature> Features { get; set; }

        public List<ProductImage> Images { get; set; }

        public List<ProductPrice> Prices { get; set; }

        public List<ProductShipping> ShippingDetails { get; set; }

        public List<ProductSize> ProductSizeMappings { get; set; }



    }

    public class ProductSize : ProductSizeMapping
    {

        public string SizeName { get; set; }
        public string SizeTypeName { get; set; }
        public int SizeTypeID { get; set; }
    }


12/01/2017
----------------
APIHelper.cs

string _apiUrl = ConfigurationManager.AppSettings["APIMainURL"].ToString();
        HttpClient _client = null;

        public ApiHelper() {

            _client = new HttpClient();
            _client.BaseAddress = new Uri(_apiUrl);
        }

        public void SendRequest(string apiname)
        {
            try
            {
                var response = _client.GetAsync(apiname).Result.Content.ReadAsAsync<List<ProductModel>>();
               // return response;
            }
            catch (Exception ex) {
               // return null;    
            }
        }

Web.config changes
------------------

<add key="APIMainURL" value="http://localhost:53445/api/"/>

ProductController.cs - Web
-------------------------

ProductHelper _productHelper = null;

        public ActionResult Index()
        {
            using (_dbContext = new karrykartEntities())
            {
                _productHelper = new ProductHelper();
                
               return View(_productHelper.GetAllProducts(_dbContext)); 
            }
            return View();
        }

        public ActionResult Details(Guid id)
        {
            using (_dbContext = new karrykartEntities())
            {
                _productHelper = new ProductHelper();
               // return View(_productHelper.GetProduct(_dbContext, id));
            }
            return View();
        }
        
        ProductController.cs - WebAPI
        -----------------------------------------
        
         public string Get(bool ActiveOnly=true)
        {

            try
            {
                _productHelper = new ProductHelper();
                return JsonConvert.SerializeObject(_productHelper.GetAllProducts(ActiveOnly), new JsonSerializerSettings() { PreserveReferencesHandling = PreserveReferencesHandling.Objects });
            }
            catch (Exception ex)
            {

            }
            finally {
                _productHelper = null;
            }
            return null;
        }
        
        ProductHelper.cs - in Web
----------------------------------------        
         public  ApiHelper _apiHelper = null;

        public ProductHelper()
        {
        _apiHelper = new ApiHelper();
        }

        public List<Product> GetAllProducts(karrykartEntities context)
        {
           // var response = _apiHelper.SendRequest("Product");
            _apiHelper.SendRequest("Product");
            //response.EnsureSuccessStatusCode();
            //var respString = response.Content.ReadAsStringAsync().Result;
            //var productList = JsonConvert.DeserializeObject<List<ProductModel>>(respString);//<IEnumerable<ProductModel>>().Result;

            //var productList = context.Products.ToList();

            List<Product> lstProduct = new List<Product>();
            //foreach (var product in productList)
            //{
            //   // lstProduct.Add(GetProduct(context, product.ProductID));
            //}

            return lstProduct;
        }

        //public Product GetProduct(ProductModel product)
        //{
        //    return context.Products.Where(x=>x.ProductID ==productID).FirstOrDefault();
        //}

ProductHelper.cs - API
-----------------------

 karrykartEntities _context = null;

        public ProductModel GetProductDetail(Guid Id)
        {
            ProductModel objProduct = null;
            _context = new karrykartEntities();
            var product = _context.Products.Find(Id);
            if ( product!= null)
            {
                objProduct = new ProductModel()
                {
                    Active = product.Active.Value,
                    BrandID = product.BrandID.Value,
                    BrandName = product.Brand.Name,
                    CategoryID = product.CategoryID.Value,
                    CategoryName = product.Category.Name,
                    CreatedBy = product.CreatedBy,
                    CreatedOn = product.CreatedOn.Value,
                    Description = product.Description,
                    Features = GetProductFeatures(product),
                    Images = product.ProductImages.ToList(),
                    Name = product.Name,
                    Prices = product.ProductPrices.ToList(),
                    ProductID = product.ProductID,
                    ProductSizeMappings = GetProductSizeMapping(_context, product),
                    ShippingDetails = product.ProductShippings.ToList(),
                    SubCategoryID = product.SubCategoryID.Value,
                    SubCategoryName = product.Subcategory.Name,
                    UpdatedBy = product.UpdatedBy,
                    UpdatedOn = product.UpdatedOn.Value
                };
            }
            _context = null;
            return objProduct;
        }


        public List<ProductModel> GetAllProducts(bool ActiveOnly = true)
        {
            _context = new karrykartEntities();
            List<Guid> productIDs = null;
            List<ProductModel> lstProducts = null;
            if(ActiveOnly)
             productIDs = _context.Products.Where(x => x.Active == ActiveOnly).Select(x => x.ProductID).ToList();
            else
             productIDs = _context.Products.Select(x => x.ProductID).ToList();

            if(productIDs.Count>0)
            {
                lstProducts = new List<ProductModel>();
                foreach (var id in productIDs)
                {
                    lstProducts.Add(GetProductDetail(id));
                }
            }
            productIDs = null;

            return lstProducts;
        }

        private List<ProductSize> GetProductSizeMapping(karrykartEntities context, Product product)
        {
            List<ProductSize> lstProductSizeMapping = new List<ProductSize>(); ProductSize objSizeMapping = null;
            foreach (var productSize in product.ProductSizeMappings)
            {
                objSizeMapping = new ProductSize()
                {
                    SizeID = productSize.SizeID.Value,
                    ProductSizeMappingID = productSize.ProductSizeMappingID,
                    Stock = productSize.Stock.Value,
                    UnitID = productSize.UnitID.Value
                };

                objSizeMapping.SizeName = context.Sizes.Where(x => x.SizeID == productSize.SizeID).FirstOrDefault().Name;
                objSizeMapping.SizeTypeID = context.Sizes.Where(x => x.SizeID == productSize.SizeID).FirstOrDefault().SizeTypeID.Value;
                objSizeMapping.SizeTypeName = context.SizeTypes.Where(x => x.SizeTypeID == objSizeMapping.SizeTypeID).FirstOrDefault().Name;
                lstProductSizeMapping.Add(objSizeMapping);
                objSizeMapping = null;
            }
            return lstProductSizeMapping;
        }

        private List<ProductFeatures> GetProductFeatures(Product product)
        {
            List<ProductFeatures> lstFeatures = new List<ProductFeatures>();
            ProductFeatures objFeature = null;
            foreach (var feature in product.ProductFeatures)
            {
                objFeature = new ProductFeatures() { FeatureID = feature.FeatureID, Feature = feature.Feature };
                lstFeatures.Add(objFeature);
                objFeature = null;
            }
            return lstFeatures;
        }
        
        ProductModel.cs
        ----------------------------
        
        public class ProductModel
    {

        public Guid ProductID { get; set; }

        public string Name { get; set; }

        public string Description { get; set; }

        public int CategoryID { get; set; }

        public string CategoryName { get; set; }

        public int BrandID { get; set; }

        public string BrandName { get; set; }

        public int SubCategoryID { get; set; }

        public string SubCategoryName { get; set; }

        public DateTime CreatedOn { get; set; }

        public DateTime UpdatedOn { get; set; }

        public string CreatedBy { get; set; }

        public string UpdatedBy { get; set; }

        public bool Active { get; set; }

        public List<ProductFeatures> Features { get; set; }

        public List<ProductImages> Images { get; set; }

        public List<ProductPrice> Prices { get; set; }

        public List<ProductShippingDetail> ShippingDetails { get; set; }

        public List<ProductSize> ProductSizeMappings { get; set; }



    }

    public class ProductFeatures
    {
        public int FeatureID { get; set; }

        public string Feature { get; set; }

    }

    public class ProductImages
    {
        public Guid ImageID { get; set; }

        public string ImageLink { get; set; }
    }

    public class ProductPrices
    {
        public int PriceID { get; set; }

        public int SizeID { get; set; }

        public decimal Price { get; set; }

        public int CurrencyID { get; set; }
    }

    public class ProductShippingDetail
    {
        public int ShippingCostID { get; set; }

        public int SizeID { get; set; }

        public decimal Cost { get; set; }
    }

    public class ProductSize 
    {
        public int ProductSizeMappingID { get; set; }

        public int SizeID { get; set; }

        public int UnitID { get; set; }

        public int Stock { get; set; }
        public string SizeName { get; set; }
        public string SizeTypeName { get; set; }
        public int SizeTypeID { get; set; }
    }

    13/01/2017
    -------------------------------------------------------
    
    ProductHelper.cs  -  In WebAPI
    
    public class ProductHelper
    {
        karrykartEntities _context = null;

        public ProductModel GetProductDetail(Guid Id)
        {
            ProductModel objProduct = null;
            _context = new karrykartEntities();
            var product = _context.Products.Find(Id);
            if (product != null)
            {
                objProduct = new ProductModel()
                {
                    Active = product.Active.Value,
                    BrandID = product.BrandID.Value,
                    BrandName = product.Brand.Name,
                    CategoryID = product.CategoryID.Value,
                    CategoryName = product.Category.Name,
                    CreatedBy = product.CreatedBy,
                    CreatedOn = product.CreatedOn.Value,
                    Description = product.Description,
                    Features = GetProductFeatures(product),
                    Images = GetProductImages(product),
                    Name = product.Name,
                    Prices = product.ProductPrices.ToList(),
                    ProductID = product.ProductID,
                    ProductSizeMappings = GetProductSizeMapping(_context, product),
                    ShippingDetails = GetShippingDetails(product),
                    SubCategoryID = product.SubCategoryID.Value,
                    SubCategoryName = product.Subcategory.Name,
                    UpdatedBy = product.UpdatedBy,
                    UpdatedOn = product.UpdatedOn.Value
                };
            }
            _context = null;
            return objProduct;
        }


        public List<ProductModel> GetAllProducts(bool ActiveOnly = true)
        {
            _context = new karrykartEntities();
            List<Guid> productIDs = null;
            List<ProductModel> lstProducts = null;
            if (ActiveOnly)
                productIDs = _context.Products.Where(x => x.Active == ActiveOnly).Select(x => x.ProductID).ToList();
            else
                productIDs = _context.Products.Select(x => x.ProductID).ToList();

            if (productIDs.Count > 0)
            {
                lstProducts = new List<ProductModel>();
                foreach (var id in productIDs)
                {
                    lstProducts.Add(GetProductDetail(id));
                }
            }
            productIDs = null;

            return lstProducts;
        }

        private List<ProductSize> GetProductSizeMapping(karrykartEntities context, Product product)
        {
            List<ProductSize> lstProductSizeMapping = new List<ProductSize>(); ProductSize objSizeMapping = null;
            foreach (var productSize in product.ProductSizeMappings)
            {
                objSizeMapping = new ProductSize()
                {
                    SizeID = productSize.SizeID.Value,
                    ProductSizeMappingID = productSize.ProductSizeMappingID,
                    Stock = productSize.Stock.Value,
                    UnitID = productSize.UnitID.Value
                };

                objSizeMapping.SizeName = context.Sizes.Where(x => x.SizeID == productSize.SizeID).FirstOrDefault().Name;
                objSizeMapping.SizeTypeID = context.Sizes.Where(x => x.SizeID == productSize.SizeID).FirstOrDefault().SizeTypeID.Value;
                objSizeMapping.SizeTypeName = context.SizeTypes.Where(x => x.SizeTypeID == objSizeMapping.SizeTypeID).FirstOrDefault().Name;
                lstProductSizeMapping.Add(objSizeMapping);
                objSizeMapping = null;
            }
            return lstProductSizeMapping;
        }

        private List<ProductFeatures> GetProductFeatures(Product product)
        {
            List<ProductFeatures> lstFeatures = new List<ProductFeatures>();
            ProductFeatures objFeature = null;
            foreach (var feature in product.ProductFeatures)
            {
                objFeature = new ProductFeatures() { FeatureID = feature.FeatureID, Feature = feature.Feature };
                lstFeatures.Add(objFeature);
                objFeature = null;
            }
            return lstFeatures;
        }

        private List<ProductImages> GetProductImages(Product product)
        {
            List<ProductImages> lstImages = new List<ProductImages>();
            ProductImages objImage = null;

            foreach (var img in product.ProductImages)
            {
                objImage = new ProductImages() { ImageID = img.ImageID,ImageLink=img.ImageLink};
                lstImages.Add(objImage);
                objImage = null;
            }

            return lstImages;
        }

        private List<ProductShippingDetail> GetShippingDetails(Product product)
        {
            List<ProductShippingDetail> lstShippingDetails = new List<ProductShippingDetail>();
            ProductShippingDetail objShippingDetail = null;

            foreach (var shipping in product.ProductShippings)
            {
                objShippingDetail = new ProductShippingDetail() { ShippingCostID = shipping.ShippingCostID, Cost = shipping.Cost.Value, SizeID = shipping.SizeID.Value };
                lstShippingDetails.Add(objShippingDetail);
                objShippingDetail = null;
            }

            return lstShippingDetails;
        }
        

    }
    PART II- 13/01/2017
    -------------------------------------------
    
    ProductModel.cs
    --------------------
       public class ProductModel
    {

        public Guid ProductID { get; set; }

        public string Name { get; set; }

        public string Description { get; set; }

        public int CategoryID { get; set; }

        public string CategoryName { get; set; }

        public int BrandID { get; set; }

        public string BrandName { get; set; }

        public int SubCategoryID { get; set; }

        public string SubCategoryName { get; set; }

        public DateTime CreatedOn { get; set; }

        public DateTime UpdatedOn { get; set; }

        public string CreatedBy { get; set; }

        public string UpdatedBy { get; set; }

        public bool Active { get; set; }

        public List<ProductFeatures> Features { get; set; }

        public List<ProductImages> Images { get; set; }

        public List<ProductPrices> Prices { get; set; }

        public List<ProductShippingDetail> ShippingDetails { get; set; }

        public List<ProductSize> ProductSizeMappings { get; set; }



    }
    
    -----------------------------------
    ProductHelper.cs
    
            private List<ProductPrices> GetProductPrices(Product product)
        {
            List<ProductPrices> lstProductPrices = new List<ProductPrices>();

            ProductPrices objProductPrice = null;

            foreach (var price in product.ProductPrices)
            {
                objProductPrice = new ProductPrices() { CurrencyID = price.CurrencyID.Value, Price = price.Price.Value, PriceID = price.PriceID, SizeID = price.SizeID.Value };

                lstProductPrices.Add(objProductPrice);

                objProductPrice = null;
            }

            return lstProductPrices;
        }
        
        ProductController.cs
        ------------------------------
        
         public List<ProductModel> Get(bool ActiveOnly=true)
        {

            try
            {
                _productHelper = new ProductHelper();
                return _productHelper.GetAllProducts(ActiveOnly);
            }
            catch (Exception ex)
            {

            }
            finally {
                _productHelper = null;
            }
            return null;
        }
    
    ProductDetailsModel.cs
    ------------------------
    public class ProductDetailsModel
    {
         public Guid ProductID { get; set; }

        public string Name { get; set; }

        public string Description { get; set; }

        public int CategoryID { get; set; }

        public string CategoryName { get; set; }

        public int BrandID { get; set; }

        public string BrandName { get; set; }

        public int SubCategoryID { get; set; }

        public string SubCategoryName { get; set; }

        public DateTime CreatedOn { get; set; }

        public DateTime UpdatedOn { get; set; }

        public string CreatedBy { get; set; }

        public string UpdatedBy { get; set; }

        public bool Active { get; set; }

        public List<ProductFeatures> Features { get; set; }

        public List<ProductImages> Images { get; set; }

        public List<ProductPrices> Prices { get; set; }

        public List<ProductShippingDetail> ShippingDetails { get; set; }

        public List<ProductSize> ProductSizeMappings { get; set; }



    }

    public class ProductFeatures
    {
        public int FeatureID { get; set; }

        public string Feature { get; set; }

    }

    public class ProductImages
    {
        public Guid ImageID { get; set; }

        public string ImageLink { get; set; }
    }

    public class ProductPrices
    {
        public int PriceID { get; set; }

        public int SizeID { get; set; }

        public decimal Price { get; set; }

        public int CurrencyID { get; set; }
    }

    public class ProductShippingDetail
    {
        public int ShippingCostID { get; set; }

        public int SizeID { get; set; }

        public decimal Cost { get; set; }
    }

    public class ProductSize 
    {
        public int ProductSizeMappingID { get; set; }

        public int SizeID { get; set; }

        public int UnitID { get; set; }

        public int Stock { get; set; }
        public string SizeName { get; set; }
        public string SizeTypeName { get; set; }
        public int SizeTypeID { get; set; }
    }
    
    ApiHelper.cs
    ----------------------
    
      public class ApiHelper
    {
        string _apiUrl = ConfigurationManager.AppSettings["APIMainURL"].ToString();
        HttpClient _client = null;

        public static List<string> InvalidJsonElements;

        public  IList<T> DeserializeToList<T>(string jsonString)
        {
            InvalidJsonElements = null;
            var array = JArray.Parse(jsonString);
            IList<T> objectsList = new List<T>();

            foreach (var item in array)
            {
                try
                {
                    // CorrectElements
                    objectsList.Add(item.ToObject<T>());
                }
                catch (Exception ex)
                {
                    InvalidJsonElements = InvalidJsonElements ?? new List<string>();
                    InvalidJsonElements.Add(item.ToString());
                }
            }

            return objectsList;
        }



        public ApiHelper() {

            _client = new HttpClient();
            _client.BaseAddress = new Uri(_apiUrl);
        }

        public string SendRequest(string apiname)
        {
            try
            {
                return  _client.GetAsync(apiname).Result.Content.ReadAsStringAsync().Result;
                 //JsonConvert.DeserializeObject < List < API.Models.ProductModel >>(_client.GetAsync(apiname).Result.Content.ReadAsStringAsync().ToString());
            }
            catch (Exception ex) {
                return null;    
            }
        }

    }
    
    ProductController.cs
    -----------------------------
    
    public ActionResult Index()
        {
            try
            {
                _productHelper = new ProductHelper();

                return View(_productHelper.GetAllProducts(_dbContext));
            }
            catch (Exception ex) {
                return View();
            }
            
        }

        public ActionResult Details(Guid id)
        {
            using (_dbContext = new karrykartEntities())
            {
                _productHelper = new ProductHelper();
               // return View(_productHelper.GetProduct(_dbContext, id));
            }
            return View();
        }
        
        Product - Index
        -----------------
        @model IList<AppBanwao.KaryKart.Web.Models.ProductDetailsModel>
    <link href="~/Content/Gridmvc.css" rel="stylesheet" />
    <script src="~/Scripts/gridmvc.min.js"></script>
    <div class="row">
        <div class="col-md-12">
            <ul class="breadcrumb">
                <li><a href="@Url.Action("Index","Home")">Home</a></li>
                <li class="active">Products</li>
            </ul>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <h3>Product list</h3>
            <hr />
            @Html.Grid(Model).Columns(columns =>
{
    columns.Add(data => data.ProductID).Titled("ProductID");
    columns.Add(data => data.Name).Titled("Name");
    columns.Add(data => data.CategoryName).Titled("Category");
    columns.Add(data => data.SubCategoryName).Titled("SubCategory");

    columns.Add()
        .Titled("Actions")
        .Encoded(false)
        .Sanitized(false)
        .SetWidth(30)
        .RenderValueAs(o => @<a href="@Url.Action("Details", "Product", new { id = o.ProductID })" class="btn btn-info">Details <i class="fa fa-search"></i></a>);

}).WithPaging(20)
            <hr />
            <a href="@Url.Action("Create","Product")" class="btn btn-default">Create <i class="fa fa-plus"></i></a>
            <hr />
            <a href="@Url.Action("Index","Home")" class="btn btn-danger">Back <i class="fa fa-backward"></i> </a>
        </div>
    </div>

Product -Details
---------------------
@{
    ViewBag.Title = "Details";
    Layout = "~/Views/Shared/_LayoutMaster.cshtml";
}
@model AppBanwao.KarryKart.Models.ProductDetailsModel
<div class="row">

    <div class="col-md-12">
        <ul class="breadcrumb">
            <li><a href="@Url.Action("Index","Home")">Home</a></li>
            <li><a href="@Url.Action("Index","Product")">Product</a></li>
            <li class="active">Details</li>
        </ul>
    </div>
</div>
<div class="row">
    
    <div class="col-md-10">

        @using (Html.BeginForm("", "", FormMethod.Post, new { @class = "form-horizontal"}))
        {
            <hr />
            <h3>Product Details</h3>
    <hr />
            @Html.AntiForgeryToken()
            @Html.HiddenFor(m=>m.ProductID)
            <div class="form-group">

                <label class = "col-lg-3 control-label">Name</label>
                <div class="col-lg-7">
                    @Html.DisplayFor(m=>m.Name)
                    
                </div>
            </div>
            <div class="form-group">

                <label class = "col-lg-3 control-label">Description</label>
                <div class="col-lg-7">
                    @Html.DisplayFor(m=>m.Description)
                    
                </div>
            </div>
            <div class="form-group">

                <label class = "col-lg-3 control-label">Category</label>
                <div class="col-lg-7">
                    @Html.DisplayFor(m=>m.CategoryName)
                    
                </div>
            </div>
            
            <div class="form-group">

                <label class = "col-lg-3 control-label">Sub Category</label>
                <div class="col-lg-7">
                    @Html.DisplayFor(m=>m.SubCategoryName)
                    
                </div>
            </div>
            
            <div class="form-group">

                <label class = "col-lg-3 control-label">Brand</label>
                <div class="col-lg-7">
                    @Html.DisplayFor(m=>m.BrandName)
                    
                </div>
            </div>
            
            <div class="form-group">

                <label class = "col-lg-3 control-label">Active</label>
                <div class="col-lg-7">
                    @if (Model.Active.Value)
                    { 
                    <span >Yes</span>
                    }else{
                    { 
                    <span >No</span>
                    }
                    }
                    
                </div>
            </div>
            
            <hr />
            
            <h3>Product Features & Image Details</h3>
    <hr />
            <div class="form-group">

                <label class = "col-lg-3 control-label">Features</label>
                <div class="col-lg-7">
            
            @foreach (var feature in Model.ProductFeatures.Split(','))
            { 
            <i class ="fa fa-check"></i> <span>@feature.Feature</span><br />
            }


                </div>
            </div>
            
            <div class="form-group">

                
                <div class="col-lg-10">
            <label >Images</label><br />
            @foreach (var imgLink in Model.ProductImages.Split(','))
            { 
            <img src="@Url.Content(imgLink.ImageLink)" class="img img-responsive" />
            }


                </div>
            </div>
            
               <hr />
            
            <h3>Product Stock & Price Details</h3>
    <hr />
            
            <div class="form-group">

                <label class = "col-lg-3 control-label">Size</label>
                <div class="col-lg-7">
                    @*@Html.DisplayFor(m=>m.SizeName)*@
                    
                </div>
            </div>
            
            <div class="form-group">

                <label class = "col-lg-3 control-label">Unit</label>
                <div class="col-lg-7">
                    @*@Html.DisplayFor(m=>m.UnitName)*@
                    
                </div>
            </div>
            
            <div class="form-group">

                <label class = "col-lg-3 control-label">Size Type</label>
                <div class="col-lg-7">
                    @*@Html.DisplayFor(m=>m.SizeTypeName)*@
                    
                </div>
            </div>
            
            <div class="form-group">

                <label class = "col-lg-3 control-label">Price</label>
                <div class="col-lg-7">
                    @*@Html.DisplayFor(m=>m.Price)*@
                    
                </div>
            </div>
            
            <div class="form-group">

                <label class = "col-lg-3 control-label">Stock</label>
                <div class="col-lg-7">
                    @*@Html.DisplayFor(m=>m.Stock)*@
                </div>
            </div>
            
            <div class="form-group">

                <label class = "col-lg-3 control-label">Shipping Cost (per unit)</label>
                <div class="col-lg-7">
                    @*@Html.DisplayFor(m=>m.ShippingCost)*@
                    
                </div>
            </div>
            <div class="form-group">
                <div class="col-lg-10 col-lg-offset-3">

                    <button type="submit" class="btn btn-success blueButton">Edit <i class="fa fa-edit"></i></button>
                    <hr />
                    <a href="@Url.Action("Index","Category")" class="btn btn-danger">Back <i class="fa fa-backward"></i> </a>
                </div>
            </div>

        }
    </div>
</div>



