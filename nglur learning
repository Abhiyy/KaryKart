17/01/2017
------------

ProductHelper.cs - Web
-------------------------
   public class ProductHelper
    {

        public ApiHelper _apiHelper = null;

        public ProductHelper()
        {
            _apiHelper = new ApiHelper();
        }

        public IList<ProductDetailsModel> GetAllProducts()
        {
            var productList= _apiHelper.DeserializeToList<ProductDetailsModel>( _apiHelper.SendRequest("Product"));
          
            return productList;
        }

        public ProductDetailsModel GetProduct(Guid id)
        {

               var product = JsonConvert.DeserializeObject<ProductDetailsModel>(_apiHelper.SendRequest("Product?id="+id));

               return product;
        }
        
    }
    
    ProductController.cs  -  API
    -----------------------------------
    
    public class ProductController : ApiController
    {
        // GET api/<controller>
        ProductHelper _productHelper = null;
        public List<ProductModel> Get(bool ActiveOnly = true)
        {

            try
            {
                _productHelper = new ProductHelper();
                return _productHelper.GetAllProducts(ActiveOnly);
            }
            catch (Exception ex)
            {

            }
            finally
            {
                _productHelper = null;
            }
            return null;
        }

        // GET api/<controller>/5
        public ProductModel Get(Guid id)
        {
            try
            {
                _productHelper = new ProductHelper();
                return _productHelper.GetProductDetail(id);
            }
            catch (Exception ex)
            {

            }
            finally
            {
                _productHelper = null;
            }
            return null;
        }


        // POST api/<controller>
        public void Post([FromBody]string value)
        {
        }

        // PUT api/<controller>/5
        public void Put(int id, [FromBody]string value)
        {
        }

        // DELETE api/<controller>/5
        public void Delete(int id)
        {
        }
    }
    
    ProductController.cs - Web
    -----------------------------------------
    
    public class ProductController : BaseController
    {
        //
        // GET: /Product/
        string _productImages = ConfigurationManager.AppSettings["ProductDirectory"].ToString();


        ProductHelper _productHelper = null;

        public ActionResult Index()
        {
            try
            {
                _productHelper = new ProductHelper();

                return View(_productHelper.GetAllProducts());
            }
            catch (Exception ex)
            {
                return View();
            }

        }

        public ActionResult Details(Guid id)
        {
            using (_dbContext = new karrykartEntities())
            {
                _productHelper = new ProductHelper();
                return View(_productHelper.GetProduct(id));
            }
            return View();
        }

        public ActionResult Create() {
            CreateViewBagForProduct();
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create(ProductModel model)
        {
            if (ModelState.IsValid)
            {
                using (_dbContext = new karrykartEntities())
                {
                    var product = new Product()
                    {
                        Active = model.Active,
                        CategoryID = model.CategoryID,
                        CreatedBy = User.Identity.Name,
                        UpdatedBy = User.Identity.Name,
                        Description = model.Description,
                        Name = model.Name,
                        ProductID = Guid.NewGuid(),
                        SubCategoryID = model.SubCategoryID,
                        BrandID = model.BrandID,
                        CreatedOn = DateTime.Now,
                        UpdatedOn = DateTime.Now

                    };
                    _dbContext.Products.Add(product);
                    _dbContext.SaveChanges();
                    _logger.WriteLog(CommonHelper.MessageType.Success, "Product created successfully with name=" + product.ProductID, "Create", "ProductController", User.Identity.Name);
                    return RedirectToAction("AddImageFeatureDetails", "Product", new { id = product.ProductID });
                }
            
            }
            CreateViewBagForProduct();
            return View();
        }

        public ActionResult AddImageFeatureDetails(Guid id)
        {
            using (_dbContext = new karrykartEntities())
            {
                var product = _dbContext.Products.Find(id);
                return View(new ProductModel() { ProductID = product.ProductID, Name = product.Name });
            
            }
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddImageFeatureDetails(ProductModel model)
        {
            
            using (_dbContext = new karrykartEntities())
            {
                    if (!(String.IsNullOrEmpty(model.Features)))
                    {
                        foreach (var featureText in model.Features.Split(';'))
                        {
                            _dbContext.ProductFeatures.Add(new ProductFeature() { Feature = featureText, ProductID = model.ProductID });
                        }
                    }

                    var lstImages = UploadImage(model);

                    foreach (var image in lstImages)
                    {
                        if (!String.IsNullOrEmpty(image))
                        {
                            _dbContext.ProductImages.Add(new ProductImage() {ImageID=Guid.NewGuid(), ImageLink = image, ProductID = model.ProductID });
                            _dbContext.SaveChanges();
                        }
                    }
                    _logger.WriteLog(CommonHelper.MessageType.Success, "Product imgaes and features added successfully with name=" + model.ProductID, "Create", "ProductController", User.Identity.Name);
                    return RedirectToAction("AddStockPrice", "Product", new { id = model.ProductID });
            }

            return View(model);
        }
        
        public ActionResult AddStockPrice(Guid id)
        {
            using (_dbContext = new karrykartEntities())
            {
                var product = _dbContext.Products.Find(id);
                CreateViewBagForStockPrice();
                return View(new ProductStockPriceModel() { ProductID = product.ProductID, Name = product.Name });
            }
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddStockPrice(ProductStockPriceModel model)
        {
            if (ModelState.IsValid)
            {
                using (_dbContext = new karrykartEntities())
                {
                    var productSizeMapping = new ProductSizeMapping() { ProductID = model.ProductID, SizeID = model.SizeID, UnitID = model.UnitID, Stock = model.Stock };
                    _dbContext.ProductSizeMappings.Add(productSizeMapping);

                    var productprice = new ProductPrice() { CurrencyID = model.CurrencyID, ProductID = model.ProductID, SizeID = model.SizeID, Price = Convert.ToDecimal(model.Price) };
                    _dbContext.ProductPrices.Add(productprice);

                    var productShipping = new ProductShipping() { ProductID = model.ProductID, SizeID = model.SizeID, Cost = Convert.ToDecimal(model.ShippingCost) };
                    _dbContext.ProductShippings.Add(productShipping);
                    _dbContext.SaveChanges();
                    _logger.WriteLog(CommonHelper.MessageType.Success, "Product Stock and price added successfully with ID=" + model.Name, "AddStockPrice", "ProductController", User.Identity.Name);
                    return RedirectToAction("Index", "Product");
                }
            }
            CreateViewBagForStockPrice();
            return View();

        }

        [HttpGet]
        public JsonResult GetSubCategories(int id) // its a GET, not a POST
        {
            _dbContext = new karrykartEntities();
            var subcategories = _dbContext.Subcategories.Where(x => x.CategoryID == id).Select(x => new { x.SCategoryID,x.Name }).ToList();
            _dbContext = null;
            return Json(subcategories, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public JsonResult GetSizes(int id) // its a GET, not a POST
        {
            _dbContext = new karrykartEntities();
            var sizes = _dbContext.Sizes.Where(x => x.SizeTypeID == id).Select(x => new { x.SizeID, x.Name }).ToList();
            _dbContext = null;
            return Json(sizes, JsonRequestBehavior.AllowGet);
        }       

        
        void CreateViewBagForProduct()
        {
            _dbContext = new karrykartEntities();
            ViewBag.CategoryID = new SelectList(_dbContext.Categories.ToList(), "CategoryID", "Name");
            ViewBag.SubcategoryID = new SelectList(_dbContext.Subcategories.ToList(), "SCategoryID", "Name");
            ViewBag.BrandID = new SelectList(_dbContext.Brands.ToList(), "BrandID", "Name");

            _dbContext = null;

        }

        void CreateViewBagForStockPrice()
        {
            _dbContext = new karrykartEntities();
            ViewBag.UnitID = new SelectList(_dbContext.Units.ToList(), "UnitID", "Name");
            ViewBag.SizeTypeID = new SelectList(_dbContext.SizeTypes.ToList(), "SizeTypeID", "Name");
            ViewBag.CurrencyID = new SelectList(_dbContext.Currencies.ToList(), "CurrencyID", "Shortform");
            ViewBag.SizeID = new SelectList(_dbContext.Sizes.ToList(), "SizeID", "Name");
            _dbContext = null;

        }

        List<string> UploadImage(ProductModel model)
        {
            List<string> lstImageLink = new List<string>();
            if (model.Image1 != null)
                lstImageLink.Add( CommonHelper.UploadFile(model.Image1, _productImages));

            if (model.Image2 != null)
                lstImageLink.Add(CommonHelper.UploadFile(model.Image2, _productImages));

            if (model.Image3 != null)
                lstImageLink.Add(CommonHelper.UploadFile(model.Image3, _productImages));
            
            return lstImageLink;
        }
    }
    
    23/01/2013
    --------------------------
    Product/Create.cshtml
    ========================
    @{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_LayoutMaster.cshtml";
}
<link href="~/Content/kendo/2017.1.118/kendo.common.min.css" rel="stylesheet" />
<link href="~/Content/kendo/2017.1.118/kendo.default.min.css" rel="stylesheet" />

<script src="http://kendo.cdn.telerik.com/2017.1.118/js/kendo.all.min.js"></script>

@model AppBanwao.KaryKart.Web.Models.ProductModel
       <div class="row">

    <div class="col-md-12">
        <ul class="breadcrumb">
            <li><a href="@Url.Action("Index","Home")">Home</a></li>
            <li><a href="@Url.Action("Index","Product")">Products</a></li>
            <li class="active">Create Product</li>
        </ul>
    </div>
</div>
<div class="row ">
    <ul class="pagination pagination-lg">
        
        <li class="active"><a href="#">Product Basic details <i class="fa fa-forward"></i></a></li>
        <li><a href="#">Features and Images Details <i class="fa fa-forward"></i></a></li>
        <li><a href="#">Stock and Cost Details <i class="fa fa-stop"></i></a></li>
        
        
    </ul>
</div>
<div class="row">
    <h3><i class="fa fa-plus-square-o"></i> Create Product</h3>
    <hr />
    <div class="col-md-10">

        @using (Html.BeginForm("Create", "Product", FormMethod.Post, new { @class = "form-horizontal" }))
        {


            @Html.AntiForgeryToken()
            <div class="form-group">

                @Html.LabelFor(m => m.Name, new { @class = "col-lg-3 control-label" })
                <div class="col-lg-7">
                    @Html.TextBoxFor(m => m.Name, new { @class = "form-control", @placeholder = "e.g. Arhar Dal" })
                    @Html.ValidationMessageFor(m => m.Name, null, new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">

                @Html.LabelFor(m => m.Description, new { @class = "col-lg-3 control-label" })
                <div class="col-lg-7">
                    @Html.TextAreaFor(m => m.Description, new { @id = "Description", @class = "form-control", @placeholder = "e.g. description of the product" })
                    @Html.ValidationMessageFor(m => m.Description, null, new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">

                @Html.LabelFor(m => m.CategoryID, new { @class = "col-lg-3 control-label" })
                <div class="col-lg-7">
                    @Html.DropDownListFor(m => m.CategoryID, (SelectList)ViewBag.CategoryID, new { @class = "form-control"})
                    @Html.ValidationMessageFor(m => m.CategoryID, null, new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">

        @Html.LabelFor(m => m.SubCategoryID, new { @class = "col-lg-3 control-label" })
        <div class="col-lg-7">
            @Html.DropDownListFor(m => m.SubCategoryID, (SelectList)ViewBag.SubcategoryID, new { @class = "form-control", @placeholder = "e.g. garments" })
            @Html.ValidationMessageFor(m => m.SubCategoryID, null, new { @class = "text-danger" })
        </div>
    </div>
            <div class="form-group">

        @Html.LabelFor(m => m.BrandID, new { @class = "col-lg-3 control-label" })
        <div class="col-lg-7">
            @Html.DropDownListFor(m => m.BrandID, (SelectList)ViewBag.BrandID, new { @class = "form-control", @placeholder = "e.g. garments" })
            @Html.ValidationMessageFor(m => m.BrandID, null, new { @class = "text-danger" })
        </div>
    </div>
            
       
            <div class="form-group">

       <div class="col-lg-3">
           </div>
        <div class="col-lg-7">
            <div class="checkbox"><label>@Html.CheckBoxFor(m=>m.Active) Active</label> </div>
        </div>
    </div>
            
                 
            
    
            <div class="form-group">
                <div class="col-lg-10 col-lg-offset-3">

                    <button type="submit" class="btn btn-success blueButton">Next <i class="fa fa-forward"></i></button>
                    <hr />
                    <a href="@Url.Action("Index","Product")" class="btn btn-danger">Back <i class="fa fa-backward"></i> </a>
                </div>
            </div>

        }
    </div>
</div>
<script type="text/javascript">
    var url = '@Url.Action("GetSubCategories", "Product")'; // Don't hard code your url's!
    var subcategories = $('#SubCategoryID'); // cache it
    $("#CategoryID").change(function () {
      //  OpenLoader();
        var id = $(this).val(); // Use $(this) so you don't traverse the DOM again
        $.getJSON(url, { id: id }, function (response) {
            subcategories.empty(); // remove any existing options
            $.each(response, function (index, item) {
           
                subcategories.append($('<option></option>').text(item.Name).val(item.SCategoryID));
            });
        //    CloseLoader();
        });
    });

    $(document).ready(function () {
        // create Editor from textarea HTML element with default set of tools
        $("#Description").kendoEditor({
            resizable: {
                content: true,
                toolbar: true
            }
        });
    });

</script>

Details.cshtml
==========================
@{
    ViewBag.Title = "Details";
    Layout = "~/Views/Shared/_LayoutMaster.cshtml";
}
@model AppBanwao.KaryKart.Web.Models.ProductDetailsModel    
<div class="row">

    <div class="col-md-12">
        <ul class="breadcrumb">
            <li><a href="@Url.Action("Index","Home")">Home</a></li>
            <li><a href="@Url.Action("Index","Product")">Product</a></li>
            <li class="active">Details</li>
        </ul>
    </div>
</div>
<div class="row">
    
    <div class="col-md-10">

        @using (Html.BeginForm("", "", FormMethod.Post, new { @class = "form-horizontal"}))
        {
            
            <h3>Product Details</h3>
    <hr />
            @Html.AntiForgeryToken()
            @Html.HiddenFor(m=>m.ProductID)
            <div class="form-group">

                <label class = "col-lg-3 control-label">Name</label>
                <div class="col-lg-7">
                    @Html.DisplayFor(m=>m.Name)
                    
                </div>
            </div>
            <div class="form-group">

                <label class = "col-lg-3 control-label">Description</label>
                <div class="col-lg-7">
                    @Html.DisplayFor(m=>m.Description)
                    
                </div>
            </div>
            <div class="form-group">

                <label class = "col-lg-3 control-label">Category</label>
                <div class="col-lg-7">
                    @Html.DisplayFor(m=>m.CategoryName)
                    
                </div>
            </div>
            
            <div class="form-group">

                <label class = "col-lg-3 control-label">Sub Category</label>
                <div class="col-lg-7">
                    @Html.DisplayFor(m=>m.SubCategoryName)
                    
                </div>
            </div>
            
            <div class="form-group">

                <label class = "col-lg-3 control-label">Brand</label>
                <div class="col-lg-7">
                    @Html.DisplayFor(m=>m.BrandName)
                    
                </div>
            </div>
            
            <div class="form-group">

                <label class = "col-lg-3 control-label">Active</label>
                <div class="col-lg-7">
                    @if (Model.Active)
                    { 
                    <span >Yes</span>
                    }else{
                    { 
                    <span >No</span>
                    }
                    }
                    
                </div>
            </div>
            
            
            
            <h3>Product Features & Image Details</h3>
    <hr />
            <div class="form-group">

                <label class = "col-lg-3 control-label">Features</label>
                <div class="col-lg-7">
            
            @foreach (var feature in Model.Features)
            { 
            <i class ="fa fa-check"></i> <span>@feature.Feature</span><br />
            }


                </div>
            </div>
            
            <div class="form-group">

                
                
                    <label class="col-lg-3 control-label">Images</label><br />
                <div class="col-lg-7">
                    @foreach (var imgLink in Model.Images)
            {
                        <img src="@Url.Content(imgLink.ImageLink)" class="img img-responsive" style="width:20%" />
            }
                    </div>

                </div>
            
               
            
            <h3>Product Stock & Price Details</h3>
    <hr />
            
            <div class="form-group">

                <label class = "col-lg-3 control-label"></label>
                <div class="col-lg-7">
                   
                    @*@Html.DisplayFor(m=>m.SizeName)*@
                    
                </div>
            </div>
            
            <div class="form-group">

                <label class = "col-lg-3 control-label">Unit</label>
                <div class="col-lg-7">
                    @*@Html.DisplayFor(m=>m.UnitName)*@
                    
                </div>
            </div>
            
            <div class="form-group">

                <label class = "col-lg-3 control-label">Size Type</label>
                <div class="col-lg-7">
                    @*@Html.DisplayFor(m=>m.SizeTypeName)*@
                    
                </div>
            </div>
            
            <div class="form-group">

                <label class = "col-lg-3 control-label">Price</label>
                <div class="col-lg-7">
                    @*@Html.DisplayFor(m=>m.Price)*@
                    
                </div>
            </div>
            
            <div class="form-group">

                <label class = "col-lg-3 control-label">Stock</label>
                <div class="col-lg-7">
                    @*@Html.DisplayFor(m=>m.Stock)*@
                </div>
            </div>
            
            <div class="form-group">

                <label class = "col-lg-3 control-label">Shipping Cost (per unit)</label>
                <div class="col-lg-7">
                    @*@Html.DisplayFor(m=>m.ShippingCost)*@
                    
                </div>
            </div>
            <div class="form-group">
                <div class="col-lg-10 col-lg-offset-3">

                    <button type="submit" class="btn btn-success blueButton">Edit <i class="fa fa-edit"></i></button>
                    <hr />
                    <a href="@Url.Action("Index","Category")" class="btn btn-danger">Back <i class="fa fa-backward"></i> </a>
                </div>
            </div>

        }
    </div>
</div>



