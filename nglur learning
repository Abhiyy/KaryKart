ForgotPasswordCtrl.js
--------------------------
app.controller("ForgotPwdController", ['$scope', '$http', '$window', function ($scope, $http, $window) {
    $scope.emailExpression = /^([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$/i;
    $scope.errortype = 'warning';
    $scope.showPwdPanel = false;
    $scope.showOtpPanel = false;
    $scope.validateuser = function () {
        var user = { UserID: $scope.UserID };

        $scope.showmessage = true;
        $scope.errortype = 'warning';
        $scope.message = GetPleaseWait();

        $http({
            url: 'ForgotPassword',
            method: 'Post',
            data: user
        }).success(function (data) {
            if (data.messagetype == 'success') {
                $scope.showOtpPanel = true;
                $scope.errortype = 'success';
                $scope.message = data.message;
            }

            if (data.messagetype == 'validuseremailnotsend') {
                $scope.showmessage = true;
                $scope.errortype = 'info';
                $scope.message = data.message;
                $scope.showOtpPanel = true;
            }

            if (data.messagetype == 'usernotexists') {
                $scope.showmessage = true;
                $scope.errortype = 'danger';
                $scope.message = data.message;
            }

        }).error(function (data) {

        })
    }

    $scope.verifyOtp = function () {
        var user = {
            UserIdentifier: $scope.UserID,
            Userotp: $scope.uOtp
        };

        $scope.showmessage = true;
        $scope.errortype = 'warning';
        $scope.message = GetPleaseWait();

        $http({
            url: 'VerifyUser',
            method: 'Post',
            data: user
        }).success(function (data) {
            if (data.messagetype == 'success') {
                $scope.showPwdPanel = true;
                $scope.errortype = 'info';
                $scope.message = data.message;
                $scope.showOtpPanel = false;
            }

            if (data.messagetype == 'error') {
                $scope.showmessage = true;
                $scope.errortype = 'danger';
                $scope.message = data.message;
            }

        }).error(function (data) {

        })
    }

    $scope.setpassword = function () {
        if ($scope.forgotForm.$valid) {
            var user = {
                UserID: $scope.UserID,
                UserPwd: $scope.newPwd
            };

            $scope.showmessage = true;
            $scope.errortype = 'warning';
            $scope.message = GetPleaseWait();

            $http({
                url: 'SetPassword',
                method: 'Post',
                data: user
            }).success(function (data) {
                if (data.messagetype == 'success') {
                    $scope.errortype = 'success';
                    $scope.message = data.message;
                    $scope.showOtpPanel = false;
                    $scope.showPwdPanel = false;
                }

            }).error(function (data) {

            })
        }
    }

}]);

ForgotPassword.cshtml
---------------------------

@{
    ViewBag.Title = "ForgotPassword";
    Layout = "~/Views/Shared/_LayoutMaster.cshtml";
}

<script src="~/Scripts/App/ForgotPwdCtrl.js"></script>
<div class="row">

    <div class="col-md-12">
        <ul class="breadcrumb">
            <li><a href="@Url.Action("Index","Home")">Home</a></li>
            <li><a href="@Url.Action("ForgotPassword","Account")">Forgot Password</a></li>
        </ul>
    </div>
</div>
<div class="row">
    <h3><i class="fa fa-key"></i> Forgot Password</h3>
    <hr />
    <div class="col-md-10" ng-controller="ForgotPwdController">
       <form name="forgotForm" novalidate>
              <div class="form-group">
                  <label for="UserID">User ID</label>
                  <input type="text" class="form-control" ng-model="UserID" name="loginUserID" ng-pattern="emailExpression" placeholder="Enter your user ID">
                  <p class="help-block errorMessage" ng-show="forgotForm.loginUserID.$error.pattern">
                      Please provide valid User ID.
                  </p>
              </div>
           <div class="form-group" ng-show="showOtpPanel">
                  <label for="uOtp">Enter OTP</label>
                  <input type="password" ng-model="uOtp" class="form-control" name="otp" placeholder="Please type provided otp" ng-required="true">
                  <p class="help-block errorMessage" ng-show="forgotForm.otp.$invalid && !forgotForm.otp.$pristine">
                      Otp is required.
                  </p>
              </div>
              <div class="form-group" ng-show="showPwdPanel">
                  <label for="newPwd">New Password</label>
                  <input type="password" ng-model="newPwd" class="form-control" name="Pwd" placeholder="Type new password" ng-required="true">
                  <p class="help-block errorMessage" ng-show="forgotForm.Pwd.$invalid && !forgotForm.loginPwd.$pristine">
                      Password is required.
                  </p>
              </div>
              
           <div class="form-group"  ng-show="showPwdPanel">
                  <label for="newcPwd">Confirm Password</label>
                  <input type="password" ng-model="newcPwd" class="form-control" name="cPwd" placeholder="Confirm Password" ng-required="true">
                  <p class="help-block errorMessage" ng-show="forgotForm.cPwd.$invalid && !forgotForm.cPwd.$pristine">
                     Confirm Password is required.
                  </p>
              </div>
           <div class="form-group" ng-show="showmessage">
                  <label ng-model="errortype" class="text-{{errortype}}"> <span ng-bind-html="message"></span> </label>
              </div>

              <button type="submit" class="btn btn-primary" ng-click="validateuser()" ng-disabled="showPwdPanel" ng-hide="showOtpPanel"><i class="fa fa-user"></i> Validate User</button>
           <button type="submit" class="btn btn-primary" ng-click="verifyOtp()" ng-show="showOtpPanel"><i class="fa fa-user"></i> Verfiy OTP</button>
         <button type="submit" class="btn btn-primary" ng-click="setpassword()"  ng-show="showPwdPanel"><i class="fa fa-user" ></i> Reset Password</button>
          </form>
      
    </div>
</div>

EditCategory.cshtml
---------------------------------
@{
    ViewBag.Title = "EditSubCategory";
    Layout = "~/Views/Shared/_LayoutMaster.cshtml";
}

@model AppBanwao.KaryKart.Web.Models.SubcategoryModel
<div class="row">

    <div class="col-md-12">
        <ul class="breadcrumb">
            <li><a href="@Url.Action("Index","Home")">Home</a></li>
            <li><a href="@Url.Action("Index","Category")">Product category</a></li>
            <li><a href="@Url.Action("SubCategory","Category")">Product category</a></li>
            <li class="active">Edit Subcategory</li>
        </ul>
    </div>
</div>
<div class="row">
    <h3><i class="fa fa-upload"></i> Edit Subcategory</h3>
    <hr />
    <div class="col-md-10">

        @using (Html.BeginForm("EditSubCategory", "Category", FormMethod.Post, new { @class = "form-horizontal"}))
        {


            @Html.AntiForgeryToken()
            @Html.HiddenFor(m=>m.ScategoryID)
            @Html.HiddenFor(m=>m.CategoryID)
            <div class="form-group">

                @Html.LabelFor(m => m.Name, new { @class = "col-lg-3 control-label" })
                <div class="col-lg-7">
                    @Html.TextBoxFor(m => m.Name, new { @class = "form-control", @placeholder = "e.g. fruits, vegetables" })
                    @Html.ValidationMessageFor(m => m.Name, null, new { @class = "text-danger" })
                </div>
            </div>
            
            <div class="form-group">
                <div class="col-lg-10 col-lg-offset-3">

                    <button type="submit" class="btn btn-success blueButton">Edit <i class="fa fa-edit"></i></button>
                    <hr />
                    <a href="@Url.Action("SubCategory","Category")" class="btn btn-danger">Back <i class="fa fa-backward"></i> </a>
                </div>
            </div>

        }
    </div>
</div>

CategoryController.cs
----------------------------

public ActionResult EditSubCategory(int id = -1)
        {
            using (_dbContext = new karrykartEntities())
            {
                var scategory = _dbContext.Subcategories.Find(id);

                return View(new SubcategoryModel {CategoryID=scategory.CategoryID,Name =scategory.Name,ScategoryID=scategory.SCategoryID });
            }
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult EditSubCategory(SubcategoryModel model)
        {
            if (ModelState.IsValid)
            {
                using (_dbContext = new karrykartEntities())
                {
                    var scategory = _dbContext.Subcategories.Find(model.ScategoryID);
                    scategory.Name = model.Name;
                    _dbContext.Entry(scategory).State = System.Data.Entity.EntityState.Modified;
                    _dbContext.SaveChanges();
                    _logger.WriteLog(CommonHelper.MessageType.Success, "The sub category has been edited successfully, subcategory ID= " + model.ScategoryID, "EditSubCategory", "CategoryController", User.Identity.Name);
                    Success("The subcategory has been edited successfully.", true);
                    return RedirectToAction("SubCategory", "Category", new { id = model.CategoryID });
                }
            }

            return View();
        }
        
  ProductCtrl.js
  --------------------------
  
 
    var product;
    $scope.basicDetailsEditing = false;

    apiURL += "product?id=" + $location.absUrl().substring(($location.absUrl().lastIndexOf("/") + 1));//$http.get(apiURL + "product?id=" + $location.absUrl().substring(($location.absUrl().lastIndexOf("/") + 1));

    $scope.selected = {};
    $scope.isAddPSS=false;
    $scope.categories;
    $scope.subcategories;
    $scope.brands;
    $scope.isAddFeature = false;
    $scope.isAddImage = false;
    $scope.sizetypes;
    $scope.units;
    $scope.sizes;

    $http.get("/Product/GetCategories").success(function (data) {
        $scope.categories = data;
    }).error(function (status) {
        //  alert(status);
    });

    $http.get("/Product/GetBrands").success(function (data) {
        $scope.brands = data;
    }).error(function (status) {
        //  alert(status);
    });

    $http.get("/Product/GetSubCategories").success(function (data) {
        $scope.subcategories = data;
    }).error(function (status) {
        //  alert(status);
    });

    $http.get("/Product/GetSizeTypes").success(function (data) {
        $scope.sizetypes = data;
    }).error(function (status) {
        //  alert(status);
    });

    $http.get("/Product/GetUnits").success(function (data) {
        $scope.units = data;
    }).error(function (status) {
        //  alert(status);
    });


    $http.get("/Product/GetSizes").success(function (data) {
        $scope.sizes = data;
    }).error(function (status) {
        //  alert(status);
    });

    LoadProduct();

    function LoadProduct() {
        $http({
            method: "GET",
            url: apiURL
        }).success(function (data, status, header, config) {
            $scope.product = data;
            $scope.productPriceStockMappings = [];
           // var json = JSON.parse(JSON.stringify(data));
            for (var i = 0; i < data.ProductSizeMappings.length; i++) {
                $scope.productPriceStockMappings.push({
                    "ProductSizeMappingID": $scope.product.ProductSizeMappings[i].ProductSizeMappingID,
                    "SizeID": $scope.product.ProductSizeMappings[i].SizeID,
                    "SizeName": $scope.product.ProductSizeMappings[i].SizeName,
                    "UnitID": $scope.product.ProductSizeMappings[i].UnitID,
                    "UnitName": $scope.product.ProductSizeMappings[i].UnitName,
                    "SizeTypeID": $scope.product.ProductSizeMappings[i].SizeTypeID,
                    "SizeTypeName": $scope.product.ProductSizeMappings[i].SizeTypeName,
                    "Stock": $scope.product.ProductSizeMappings[i].Stock,
                    "ShippingCostID": $scope.product.ShippingDetails[i].ShippingCostID,
                    "Cost": $scope.product.ShippingDetails[i].Cost,
                    "PriceID": $scope.product.Prices[i].PriceID,
                    "Price": $scope.product.Prices[i].Price,
                    "CurrencyID": $scope.product.Prices[i].CurrencyID,
                });
            }
        });


    }

    $scope.editBasicDetails = function () {
        $scope.basicDetailsEditing = true;
    };

    $scope.cancelBasicDetails = function () {
        $scope.basicDetailsEditing = false;
    };

    $scope.updateBasicDetails = function () {
        var basicproductDetails = {
            "ProductID": $scope.product.ProductID,
            "Name": $scope.product.Name,
            "Description": $scope.product.Description,
            "CategoryID": $scope.product.CategoryID,
            "SubCategoryID": $scope.product.SubCategoryID,
            "BrandID": $scope.product.BrandID,
            "Active": $scope.product.Active
        };

        $http.post("/Product/EditBasicProductDetails", { model: basicproductDetails }).success(function (responseData) {
            if (responseData.messagetype = "success") {
                alert(responseData.message);
                $scope.basicDetailsEditing = false;
            } else {
                alert(responseData.message);
            }
        }).error(function (responseData) {
            console.log("Error !" + responseData);
        });
    };


    $scope.deleteProductFeature = function (id) {
        $http.post("/Product/RemoveProductFeature", { ProductID: $scope.product.ProductID, FeatureID: id }).success(function (responseData) {
            if (responseData.messagetype = "success") {
                alert(responseData.message);
                LoadProduct();

            } else {
                alert(responseData.message);
            }
        }).error(function (responseData) {
            console.log("Error !" + responseData);
        });
    };

    $scope.getTemplate = function (feature) {
        if (feature.FeatureID === $scope.selected.FeatureID) return 'edit';
        else if (feature.FeatureID == '-1') return 'add';
        else return 'display';
    };

    $scope.getTemplateImages = function (image) {
        if (image.ImageID == '-1') return 'addPicture';
        else return 'displayPicture';
    };

    $scope.getTemplateForProductStockPrice = function (ps) {
        
            if (ps.ProductSizeMappingID == '-1') return 'addPricing';
            else return 'displayPricing';
        
    };

    $scope.editFeature = function (feature) {
        $scope.selected = angular.copy(feature);
    };

    $scope.addFeature = function () {
        $scope.product.Features.push({
            "FeatureID": "-1",
            "Feature": ""
        });

        $scope.isAddFeature = true;
    }

    $scope.addImage = function () {
        $scope.product.Images.push({
            "ImageID": "-1",
            "ImageLink": ""
        });

        $scope.isAddImage = true;
    }

    $scope.addProductStockPriceSize = function(){
        $scope.productPriceStockMappings.push({
            "ProductSizeMappingID":"-1",
        });
        $scope.isAddPSS = true;
    }

    $scope.reset = function (i) {
        if (i == '1') $scope.selected = {};
     
    };



    $scope.saveEditedFeature = function (model) {
        $http.post("/Product/EditProductFeature", { ProductID: $scope.product.ProductID, FeatureID: model.FeatureID, featureText: model.Feature }).success(function (responseData) {
            if (responseData.messagetype = "success") {
                alert(responseData.message);
                $scope.reset();
            } else {
                alert(responseData.message);
            }
        }).error(function (responseData) {
            console.log("Error !" + responseData);
        });

    };

    $scope.saveAddedPrice = function (model) {
        $http.post("/Product/AddProductStockPrice", {
            ProductID: $scope.product.ProductID, SizeID: model.SizeID, SizeName: model.SizeName,
            UnitID: model.UnitID, SizeTypeID: model.SizeTypeID, Stock: model.Stock, Cost: model.Cost,
            Price: model.Price
        }).success(function (responseData) {
            if (responseData.messagetype = "success") {
                //$scope.reset(2);
                alert(responseData.message);
                LoadProduct();
                $scope.isAddPSS = false;
            } else {
                alert(responseData.message);
            }
        }).error(function (responseData) {
            console.log("Error !" + responseData);
        });

    };

    $scope.saveNewImage = function (model) {

        var formData = new FormData();
        formData.append("file", $scope.files[0]);
        formData.append("ProductID", $scope.product.ProductID);


        $http.post("/Product/AddNewProductImage", formData, {
            transformRequest: angular.identity,
            headers: { 'Content-Type': undefined }
        }).success(function (responseData) {
            if (responseData.messagetype = "success") {
                alert(responseData.message);
                LoadProduct();//  $scope.product.Images.splice(($scope.product.Images.length - 1), 1, { "ImageID": responseData.id, "ImageLink": responseData.ImageLink });
                $scope.isAddImage = false;

            } else {
                alert(responseData.message);
            }
        }).error(function (responseData) {
            console.log("Error !" + responseData);
        })
    };

    $scope.removeImage = function () {
        $scope.product.Images.splice(($scope.product.Images.length - 1), 1);
        $scope.isAddImage = false;
    };
    $scope.uploadedFile = function (element) {
        $scope.$apply(function ($scope) {
            $scope.files = element.files;
        });
    };

    $scope.removeNewFeature = function () {
        $scope.product.Features.splice(($scope.product.Features.length - 1), 1);
        $scope.isAddFeature = false;
    }
    $scope.removeNewProductSizeSettings = function () {
        $scope.productPriceStockMappings.splice(($scope.productPriceStockMappings.length - 1), 1);
        $scope.isAddPSS = false;
    }

    $scope.deleteImage = function (id) {
        $http.post("/Product/RemoveProductImage", { ProductID: $scope.product.ProductID, ImageID: id }).success(function (responseData) {
            if (responseData.messagetype = "success") {
                alert(responseData.message);
                LoadProduct();

            } else {
                alert(responseData.message);
            }
        }).error(function (responseData) {
            console.log("Error !" + responseData);
        });
    }

    $scope.deleteProductStockPrice = function (ps){
        $http.post("/Product/DeleteProductSizeMapping", { ProductID: $scope.product.ProductID, SizeID: ps.SizeID }).success(function (responseData) {
            if (responseData.messagetype = "success") {
                alert(responseData.message);
                LoadProduct();

            } else {
                alert(responseData.message);
            }
        }).error(function (responseData) {
            console.log("Error !" + responseData);
        });
    };

   

    $scope.saveAddedFeature = function (model) {
        $http.post("/Product/AddProductFeature", { ProductID: $scope.product.ProductID, FeatureID: model.FeatureID, featureText: model.Feature }).success(function (responseData) {
            if (responseData.messagetype = "success") {
                alert(responseData.message);
                LoadProduct();
                $scope.isAddFeature = false;

            } else {
                alert(responseData.message);
            }
        }).error(function (responseData) {
            console.log("Error !" + responseData);
        });
    };
}]);

Product - Edit.cshtml
--------------------------
@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_LayoutMaster.cshtml";
}
<link href="~/Content/kendo/2017.1.118/kendo.common.min.css" rel="stylesheet" />
<link href="~/Content/kendo/2017.1.118/kendo.default.min.css" rel="stylesheet" />
<script src="http://kendo.cdn.telerik.com/2017.1.118/js/kendo.all.min.js"></script>
<script type="text/javascript">

    //$(document).ready(function () {
    //    // create Editor from textarea HTML element with default set of tools
    //    $("#productDescription").kendoEditor({
    //        resizable: {
    //            content: true,
    //            toolbar: true
    //        }
    //    });
    //});
</script>
<script src="~/Scripts/App/ProductCtrl.js"></script>

<div class="row">

    <div class="col-md-12">
        <ul class="breadcrumb">
            <li><a href="@Url.Action("Index","Home")">Home</a></li>
            <li><a href="@Url.Action("Index","Product")">Product</a></li>
            <li class="active">Edit</li>
        </ul>
    </div>
</div>

<div class="row">
    <div class="col-md-10" ng-controller="ProductController">
        <h3>Product Details</h3>
        <hr />

        <form name="formBasicdetails" class="form-horizontal">
            <div class="form-group">

                <label class="col-lg-3 control-label" for="product.Name">Name</label>
                <div class="col-lg-7">
                    <input type="text" ng-disabled="!basicDetailsEditing" ng-model="product.Name" placeholder="e.g Arhar dal, chocolate etc." name="productName" class="form-control" />

                </div>
            </div>


            <div class="form-group">

                <label class="col-lg-3 control-label" for="product.Description">Description</label>
                <div class="col-lg-7">
                    <textarea ng-disabled="!basicDetailsEditing" ng-model="product.Description" placeholder="e.g Enter product details." name="productDescription" id="productDescription" class="form-control"></textarea>

                </div>
            </div>

            <div class="form-group">

                <label class="col-lg-3 control-label" for="product.CategoryID">Category</label>
                <div class="col-lg-7">
                    <select ng-disabled="!basicDetailsEditing" ng-options="c.CategoryID as c.Name for c in categories" ng-init="product.CategoryID" ng-model="product.CategoryID" class="form-control" name="productCategory" id="productCategory"></select>
                </div>
            </div>

            <div class="form-group">

                <label class="col-lg-3 control-label" for="product.SubCategoryID">Sub-Category</label>
                <div class="col-lg-7">

                    <select ng-disabled="!basicDetailsEditing" ng-options="sc.SCategoryID as sc.Name for sc in subcategories" ng-model="product.SubCategoryID" class="form-control" name="productSubCategory" id="productSubCategory"></select>

                </div>
            </div>

            <div class="form-group">

                <label class="col-lg-3 control-label" for="product.BrandID">Brand</label>
                <div class="col-lg-7">
                    <select ng-disabled="!basicDetailsEditing" ng-options="b.BrandID as b.Name for b in brands" ng-model="product.BrandID" class="form-control" name="productBrand" id="productBrand"></select>

                </div>
            </div>

            <div class="form-group">

                <label class="col-lg-3 control-label" for="product.Active">Active</label>
                <div class="col-lg-7">
                    <input type="checkbox" ng-disabled="!basicDetailsEditing" ng-model="product.Active" name="productActive" id="productActive" />

                </div>
            </div>

            <div class="form-group">
                <div class="col-lg-7 col-lg-offset-3">
                    <button ng-click="editBasicDetails()" ng-hide="basicDetailsEditing" class="btn btn-info">Edit Basic Details <i class="fa fa-edit"></i></button>
                    <button ng-click="updateBasicDetails()" ng-show="basicDetailsEditing" class="btn btn-success">Update <i class="fa fa-check-circle"></i></button>
                    <button ng-click="cancelBasicDetails()" ng-show="basicDetailsEditing" class="btn btn-danger">Cancel <i class="fa fa-close"></i></button>


                </div>
            </div>
        </form>

        <hr />
        <h3>Product Features and Images</h3>
        <hr />

        <form name="formproductFeatureImages" class="form-horizontal">
            <div class="form-group">

                
                <div class="col-lg-12">
                    <h4 for="product.Features">Features</h4><br />
                    <table class="table table-striped table-hover">
                        <tr><th>#</th> <th>Feature Description</th><td>Actions</td></tr>
                        <tr ng-repeat="x in product.Features" ng-include="getTemplate(x)"></tr>
                    </table>
                    <script type="text/ng-template" id="display">
                        <td>{{ x.FeatureID }}</td>
                        <td>
                            {{ x.Feature }}
                        </td>
                        <td>
                            <button class="btn btn-info btn-xs" id="btnEditFeature" title="Edit Feature" ng-click="editFeature(x)"> <i class="fa fa-pencil"></i> </button> <button class="btn btn-danger btn-xs" title="Remove Feature" id="btnDelete" ng-click="deleteProductFeature( x.FeatureID )"> <i class="fa fa-remove"></i> </button>
                        </td>
                    </script>
                    <script type="text/ng-template" id="edit">
                        <td><span ng-model="selected.FeatureID">{{ x.FeatureID }}</span></td>
                        <td><input type="text" ng-model="selected.Feature" /></td>
                        <td>
                            <button class="btn btn-success btn-xs" ng-click="saveEditedFeature(selected)">Save</button>
                            <button class="btn btn-danger btn-xs" ng-click="reset('1')">Cancel</button>
                        </td>
                    </script>
                    <script type="text/ng-template" id="add">
                        <td><span ng-model="x.FeatureID">{{x.FeatureID}} </span></td>
                        <td><input type="text" ng-model="x.Feature" /></td>
                        <td>
                            <button class="btn btn-success btn-xs" ng-click="saveAddedFeature(x )">Save</button>
                            <button class="btn btn-danger btn-xs" ng-click="removeNewFeature()">Cancel</button>
                        </td>
                    </script>
                    <button class="btn btn-info" ng-disabled="isAddFeature" ng-click="addFeature()">Add new feature <i class="fa fa-plus"></i> </button>
                    @*<input type="text" ng-disabled="!basicDetailsEditing" ng-model="product.Name" placeholder="e.g Arhar dal, chocolate etc." name="productName" class="form-control" />*@

                </div>
            </div>

            <div class="form-group">

             
                <div class="col-lg-12">
                    <h4 for="product.Images">Images</h4>
                    <table class="table table-striped table-hover">
                        <tr><th>#</th> <th>Image</th><td>Actions</td></tr>
                        <tr ng-repeat="i in product.Images" ng-include="getTemplateImages(i)"> </tr>
                    </table>
                    <script type="text/ng-template" id="displayPicture">
                        <td>{{ i.ImageID }}</td>
                        <td>
                            <img src="{{i.ImageLink}}" )" style="width:100px" />
                        </td>
                        <td>
                            <button class="btn btn-danger btn-xs" title="Remove Image" id="btnImageDelete" ng-click="deleteImage( i.ImageID )"> <i class="fa fa-remove"></i> </button>
                        </td>
                    </script>

                    <script type="text/ng-template" id="addPicture">
                        <td><span ng-model="i.ImageID">{{i.ImageID}} </span></td>
                        <td><input type="file" onchange="angular.element(this).scope().uploadedFile(this)" /> <span>{{i.ImageLink}}</span></td>
                        <td>
                            <button class="btn btn-success btn-xs" ng-click="saveNewImage(i)">Save</button>
                            <button class="btn btn-danger btn-xs" ng-click="removeImage()">Cancel</button>
                        </td>
                    </script>
                    <button class="btn btn-info" ng-disabled="isAddImage" ng-click="addImage()">Add new Image <i class="fa fa-plus"></i> </button>
                    @*<input type="text" ng-disabled="!basicDetailsEditing" ng-model="product.Name" placeholder="e.g Arhar dal, chocolate etc." name="productName" class="form-control" />*@

                </div>
            </div>



        </form>

        <hr />
        <h3>Product Pricing and Stock Availaibilty</h3>
        <hr />
        
        <form class="form-horizontal" name="formProductPriceStockDetails">
            <div class="form-group">
                <div class="col-lg-12">
                    <table class="table table-striped table-hover">
                        <tr>
                            <th>Size</th>
                            <th>Unit</th>
                            <th>Size Type</th>
                            <th>Price (INR)</th>
                            <th>Shpping Cost (INR)</th>
                            <th>Stock</th>
                            <th>Actions</th>
                        </tr>
                        <tr ng-repeat="ps in productPriceStockMappings" ng-include="getTemplateForProductStockPrice(ps)"></tr>
                    </table>
                    <script type="text/ng-template" id="displayPricing">
                        <td>{{ ps.SizeName }}</td>
                        <td>{{ ps.UnitName }}</td>
                        <td>{{ ps.SizeTypeName }}</td>
                        <td>{{ ps.Price }}</td>
                        <td>{{ ps.Cost }}</td>
                        <td>{{ ps.Stock }}</td>
                        <td>
                          @*  <button class="btn btn-info btn-xs" title="Delete" ng-click="editProductStockPrice(ps)"> <i class="fa fa-pencil"></i> </button>*@
                           <button class="btn btn-danger btn-xs" title="Remove"  ng-click="deleteProductStockPrice(ps)"> <i class="fa fa-remove"></i> </button>      
</td>
                    </script>
                    <script type="text/ng-template" id="addPricing">
                        <td><select ng-options="si.SizeID as si.Name for si in sizes" ng-init="ps.SizeID=1" ng-model="ps.SizeID" ></select></td>
                        <td><select ng-options="u.UnitID as u.Name for u in units" ng-init="ps.UnitID=1" ng-model="ps.UnitID" ></select></td>
                        <td> <select ng-options="s.SizeTypeID as s.Name for s in sizetypes" ng-init="ps.SizeTypeID=1" ng-model="ps.SizeTypeID" ></select> </td>
                        <td><input type="text" ng-model="ps.Price" /></td>
                        <td><input type="text" ng-model="ps.Cost" /></td>
                        <td><input type="text" ng-model="ps.Stock" /></td>
                        <td>
                            <button class="btn btn-success btn-xs" ng-click="saveAddedPrice(ps)">Save</button>
                            <button class="btn btn-danger btn-xs" ng-click="removeNewProductSizeSettings()">Cancel</button>
                        </td>
                    </script>

                      <button class="btn btn-info" ng-disabled="isAddPSS" ng-click="addProductStockPriceSize()">Add new setting <i class="fa fa-plus"></i> </button>
                </div>
                </div>
        </form>
        
        
        <hr />
                    <a href="@Url.Action("Index","Product")" class="btn btn-danger">Back <i class="fa fa-backward"></i> </a>
    </div>
</div>

SubCategory.cshtml
--------------------------
@{
    ViewBag.Title = "Subcategory";
    Layout = "~/Views/Shared/_LayoutMaster.cshtml";
}

@using GridMvc.Html
@model List<AppBanwao.KarryKart.Model.Subcategory>

<link href="~/Content/Gridmvc.css" rel="stylesheet" />
<script src="~/Scripts/gridmvc.min.js"></script>
<div class="row">

    <div class="col-md-12">
        <ul class="breadcrumb">
            <li><a href="@Url.Action("Index","Home")">Home</a></li>
            <li class="active">Category Details</li>

        </ul>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <h3> @ViewBag.Category - Sub categories List</h3>
        <hr />
        @Html.Grid(Model).Columns(columns =>
{
    columns.Add(data => data.SCategoryID).Titled("ID");
    columns.Add(data => data.Name).Titled("Name");

    columns.Add()
        .Titled("Actions")
        .Encoded(false)
        .Sanitized(false)
        .SetWidth(30)
        .RenderValueAs(o => @<a href="@Url.Action("EditSubCategory", "Category", new { id = o.SCategoryID })" class="btn btn-info">Edit <i class="fa fa-edit"></i></a>);
      
}).WithPaging(20)

        <hr />

        <a href="@Url.Action("Createsubcategory","Category", new {id =  ViewBag.CategoryID})" class="btn btn-default">Create <i class="fa fa-plus"></i></a>

        <hr />
         <a href="@Url.Action("Index","Category")" class="btn btn-danger">Back <i class="fa fa-backward"></i></a>
    </div>
</div>

ProductController.cs
-----------------------

public class ProductController : BaseController
    {
        //
        // GET: /Product/
        string _productImages = ConfigurationManager.AppSettings["ProductDirectory"].ToString();


        ProductHelper _productHelper = null;

        public ActionResult Index()
        {
            try
            {
                _productHelper = new ProductHelper();

                return View(_productHelper.GetAllProducts());
            }
            catch (Exception ex)
            {
                return View();
            }

        }

        public ActionResult Details(Guid id)
        {
            using (_dbContext = new karrykartEntities())
            {
                _productHelper = new ProductHelper();
                return View(_productHelper.GetProduct(id));
            }
            return View();
        }

        public ActionResult Create()
        {
            CreateViewBagForProduct();
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create(ProductModel model)
        {
            if (ModelState.IsValid)
            {
                using (_dbContext = new karrykartEntities())
                {
                    var product = new Product()
                    {
                        Active = model.Active,
                        CategoryID = model.CategoryID,
                        CreatedBy = User.Identity.Name,
                        UpdatedBy = User.Identity.Name,
                        Description = model.Description,
                        Name = model.Name,
                        ProductID = Guid.NewGuid(),
                        SubCategoryID = model.SubCategoryID,
                        BrandID = model.BrandID,
                        CreatedOn = DateTime.Now,
                        UpdatedOn = DateTime.Now

                    };
                    _dbContext.Products.Add(product);
                    _dbContext.SaveChanges();
                    _logger.WriteLog(CommonHelper.MessageType.Success, "Product created successfully with name=" + product.ProductID, "Create", "ProductController", User.Identity.Name);
                    return RedirectToAction("AddImageFeatureDetails", "Product", new { id = product.ProductID });
                }

            }
            CreateViewBagForProduct();
            return View();
        }

        public ActionResult AddImageFeatureDetails(Guid id)
        {
            using (_dbContext = new karrykartEntities())
            {
                var product = _dbContext.Products.Find(id);
                return View(new ProductModel() { ProductID = product.ProductID, Name = product.Name });

            }
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddImageFeatureDetails(ProductModel model)
        {

            using (_dbContext = new karrykartEntities())
            {
                if (!(String.IsNullOrEmpty(model.Features)))
                {
                    foreach (var featureText in model.Features.Split(';'))
                    {
                        _dbContext.ProductFeatures.Add(new ProductFeature() { Feature = featureText, ProductID = model.ProductID });
                    }
                }

                var lstImages = UploadImage(model);

                foreach (var image in lstImages)
                {
                    if (!String.IsNullOrEmpty(image))
                    {
                        _dbContext.ProductImages.Add(new ProductImage() { ImageID = Guid.NewGuid(), ImageLink = image, ProductID = model.ProductID });
                        _dbContext.SaveChanges();
                    }
                }
                _logger.WriteLog(CommonHelper.MessageType.Success, "Product imgaes and features added successfully with name=" + model.ProductID, "Create", "ProductController", User.Identity.Name);
                return RedirectToAction("AddStockPrice", "Product", new { id = model.ProductID });
            }

            return View(model);
        }

        public ActionResult AddStockPrice(Guid id)
        {
            using (_dbContext = new karrykartEntities())
            {
                var product = _dbContext.Products.Find(id);
                CreateViewBagForStockPrice();
                return View(new ProductStockPriceModel() { ProductID = product.ProductID, Name = product.Name });
            }
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddStockPrice(ProductStockPriceModel model)
        {
            if (ModelState.IsValid)
            {
                using (_dbContext = new karrykartEntities())
                {
                    var productSizeMapping = new ProductSizeMapping() { ProductID = model.ProductID, SizeID = model.SizeID, UnitID = model.UnitID, Stock = model.Stock };
                    _dbContext.ProductSizeMappings.Add(productSizeMapping);

                    var productprice = new ProductPrice() {UnitID=model.UnitID, CurrencyID = model.CurrencyID, ProductID = model.ProductID, SizeID = model.SizeID, Price = Convert.ToDecimal(model.Price) };
                    _dbContext.ProductPrices.Add(productprice);

                    var productShipping = new ProductShipping() { UnitID = model.UnitID, ProductID = model.ProductID, SizeID = model.SizeID, Cost = Convert.ToDecimal(model.ShippingCost) };
                    _dbContext.ProductShippings.Add(productShipping);
                    _dbContext.SaveChanges();
                    _logger.WriteLog(CommonHelper.MessageType.Success, "Product Stock and price added successfully with ID=" + model.Name, "AddStockPrice", "ProductController", User.Identity.Name);
                    return RedirectToAction("Index", "Product");
                }
            }
            CreateViewBagForStockPrice();
            return View();

        }

        [HttpGet]
        public JsonResult GetCategories()
        {
            _dbContext = new karrykartEntities();
            var categories = _dbContext.Categories.Select(x => new { x.CategoryID, x.Name }).ToList();
            _dbContext = null;
            return Json(categories, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public JsonResult GetBrands()
        {
            _dbContext = new karrykartEntities();
            var brands = _dbContext.Brands.Select(x => new { x.BrandID, x.Name }).ToList();
            _dbContext = null;
            return Json(brands, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public JsonResult GetSubCategories(int id = -1) // its a GET, not a POST
        {
            _dbContext = new karrykartEntities();
            if (id != -1)
            {
                var subcategories = _dbContext.Subcategories.Where(x => x.CategoryID == id).Select(x => new { x.SCategoryID, x.Name }).ToList();
                _dbContext = null;
                return Json(subcategories, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var subcategories = _dbContext.Subcategories.Select(x => new { x.SCategoryID, x.Name }).ToList();
                _dbContext = null;
                return Json(subcategories, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpGet]
        public JsonResult GetSizes(int id=-1) // its a GET, not a POST
        {
            if( id!=-1)
            {
            _dbContext = new karrykartEntities();
            var sizes = _dbContext.Sizes.Where(x => x.SizeTypeID == id).Select(x => new { x.SizeID, x.Name }).ToList();
            _dbContext = null;
            return Json(sizes, JsonRequestBehavior.AllowGet);
            }else{
            _dbContext = new karrykartEntities();
            var sizes = _dbContext.Sizes.Select(x => new { x.SizeID, x.Name }).ToList();
            _dbContext = null;
            return Json(sizes, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpGet]
        public JsonResult GetSizeTypes()
        {
            _dbContext = new karrykartEntities();

            var sizetypes = _dbContext.SizeTypes.Select(x => new { x.SizeTypeID, x.Name }).ToList();
            _dbContext = null;

            return Json(sizetypes, JsonRequestBehavior.AllowGet);
        }
        
        [HttpGet]
        public JsonResult GetUnits()
        {
            _dbContext = new karrykartEntities();
            var units = _dbContext.Units.Select(x => new { x.UnitID, x.Name }).ToList();
            _dbContext = null;

            return Json(units, JsonRequestBehavior.AllowGet);
        }

        public ActionResult Edit(Guid id)
        {
            return View();
        }

        [HttpPost]
        public ActionResult EditBasicProductDetails(ProductDetailsModel model)
        {
            if (model.ProductID != Guid.Empty)
            {
                _dbContext = new karrykartEntities();
                var product = _dbContext.Products.Find(model.ProductID);
                if (product != null)
                {
                    product.Active = model.Active;
                    product.BrandID = model.BrandID;
                    product.CategoryID = model.CategoryID;
                    product.SubCategoryID = model.SubCategoryID;
                    product.Description = model.Description;
                    product.Name = model.Name;
                    product.UpdatedBy = User.Identity.Name;
                    product.UpdatedOn = DateTime.Now;
                    _dbContext.Entry(product).State = EntityState.Modified;
                    _dbContext.SaveChanges();
                    _logger.WriteLog(CommonHelper.MessageType.Success, "Basic product details updated successfully with Name=" + model.Name, "EditBasicProductDetails", "ProductController", User.Identity.Name);

                    return Json(new { messagetype = ApplicationMessages.Product.SUCCESS, message = "Basic product details updated successfully." });
                }
            }
            return View();
        }

        [HttpPost]
        public ActionResult RemoveProductFeature(Guid ProductID, int FeatureID)
        {

            _dbContext = new karrykartEntities();

            var feature = _dbContext.ProductFeatures.Where(x => x.FeatureID == FeatureID && x.ProductID == ProductID).FirstOrDefault();

            if (feature != null)
            {
                _dbContext.Entry(feature).State = EntityState.Deleted;
                _dbContext.SaveChanges();
                _logger.WriteLog(CommonHelper.MessageType.Success, "Product feature deleted successfully with id=" + FeatureID, "RemoveProductFeature", "ProductController", User.Identity.Name);
                _dbContext = null;
                return Json(new { messagetype = ApplicationMessages.Product.SUCCESS, message = "Product feature removed successfully." });
            }

            return View();
        }

        [HttpPost]
        public ActionResult EditProductFeature(Guid ProductID, int FeatureID, string featureText)
        {
            _dbContext = new karrykartEntities();

            var feature = _dbContext.ProductFeatures.Where(f => f.FeatureID == FeatureID && f.ProductID == ProductID).FirstOrDefault();
            if (feature != null)
            {
                feature.Feature = featureText;
                _dbContext.Entry(feature).State = EntityState.Modified;
                _dbContext.SaveChanges();
                _dbContext = null;
                _logger.WriteLog(CommonHelper.MessageType.Success, "Product feature edited successfully with id=" + FeatureID, "EditProductFeature", "ProductController", User.Identity.Name);
                return Json(new { messagetype = ApplicationMessages.Product.SUCCESS, message = "Product feature added successfully." });
            }
            return View();
        }

        [HttpPost]
        public ActionResult AddProductFeature(Guid ProductID, int FeatureID, string featureText)
        {
            if (FeatureID == -1)
            {
                _dbContext = new karrykartEntities();
                var feature = new ProductFeature() { ProductID = ProductID, Feature = featureText };
                _dbContext.ProductFeatures.Add(feature);
                _dbContext.SaveChanges();
                _dbContext = null;
                _logger.WriteLog(CommonHelper.MessageType.Success, "Product feature added successfully with text=" + featureText, "AddProductFeature", "ProductController", User.Identity.Name);

                return Json(new { messagetype = ApplicationMessages.Product.SUCCESS, message = "New product feature details added successfully.", id = feature.FeatureID });
            }
            return View();
        }

        [HttpPost]
        public ActionResult AddNewProductImage(Guid ProductID, HttpPostedFileBase file)
        {
            if (file != null)
            {
                _dbContext = new karrykartEntities();
                var productImage = new ProductImage() {ImageID=Guid.NewGuid(), ImageLink = CommonHelper.UploadFile(file, _productImages), ProductID = ProductID };
                _dbContext.ProductImages.Add(productImage);
                _dbContext.SaveChanges();
                _logger.WriteLog(CommonHelper.MessageType.Success, "Product image added successfully for product ID=" + ProductID +", ImageID="+productImage.ImageID, "AddNewProductImage", "ProductController", User.Identity.Name);
                return Json(new { messagetype = ApplicationMessages.Product.SUCCESS, message = "New product image details added successfully.", id = productImage.ImageID, ImageLink = productImage.ImageLink });
            }
          
            return View();
        }

        [HttpPost]
        public ActionResult RemoveProductImage(Guid ProductID, Guid ImageID)
        {
            if (ProductID != null)
            {
                _dbContext = new karrykartEntities();
                var productImage = _dbContext.ProductImages.Where(x => x.ProductID == ProductID && x.ImageID == ImageID).FirstOrDefault();
                _dbContext.Entry(productImage).State = EntityState.Deleted;
                _dbContext.SaveChanges();
                _dbContext = null;
                _logger.WriteLog(CommonHelper.MessageType.Success, "Product image deleted successfully.", "RemoveProductImage", "ProductController", User.Identity.Name);

                return Json(new { messagetype = ApplicationMessages.Product.SUCCESS, message = "New product feature details added successfully." });
            
            }

            return View();
        }

        [HttpPost]
        public ActionResult AddProductStockPrice(Guid ProductID, int SizeID, string SizeName, int UnitID, int SizeTypeID, int Stock, decimal Cost, decimal Price)
        {
            if (ProductID != null)
            { 
                _dbContext = new karrykartEntities();
               
                var productSizeMapping = _dbContext.ProductSizeMappings.Where(x => x.ProductID == ProductID && x.SizeID==SizeID &&x.UnitID==UnitID).FirstOrDefault();
                if (productSizeMapping == null)
                {
                    productSizeMapping = new ProductSizeMapping();
                    productSizeMapping.ProductID = ProductID;
                    productSizeMapping.SizeID = SizeID;
                    productSizeMapping.Stock = Stock;
                    productSizeMapping.UnitID = UnitID;
                    _dbContext.Entry(productSizeMapping).State = EntityState.Added;
                }
                else {
                    return Json(new { messagetype = ApplicationMessages.Product.ERROR, message = "Product and size mapping details already exists." });
                }

                var price = _dbContext.ProductPrices.Where(x => x.ProductID == ProductID && x.SizeID==SizeID && x.UnitID==UnitID).FirstOrDefault();
                if (price == null)
                {
                    price = new ProductPrice();
                    price.Price = Price;
                    price.SizeID = SizeID;
                    price.ProductID = ProductID;
                    price.CurrencyID = 1;
                    price.UnitID = UnitID;
                    _dbContext.Entry(price).State = EntityState.Added;

                }
                else {
                    return Json(new { messagetype = ApplicationMessages.Product.ERROR, message = "Product's size and Price mapping details already exists." });
                }
                var shipping = _dbContext.ProductShippings.Where(x => x.SizeID == SizeID && x.ProductID == ProductID && x.UnitID==UnitID).FirstOrDefault();
                if (shipping == null)
                {
                    shipping = new ProductShipping();
                    shipping.Cost = Cost;
                    shipping.SizeID = SizeID;
                    shipping.ProductID = ProductID;
                    shipping.UnitID = UnitID;
                    _dbContext.Entry(shipping).State = EntityState.Added;

                }
                else {
                    return Json(new { messagetype = ApplicationMessages.Product.ERROR, message = "Product size and shipping cost mapping details already exists." });
                }

                _dbContext.SaveChanges();

                _logger.WriteLog(CommonHelper.MessageType.Success, "Product stock, price and size mapping details has been added successfully.", "EditProductStockPrice", "ProductController", User.Identity.Name);

                return Json(new { messagetype = ApplicationMessages.Product.SUCCESS, message = "Product stock, price and size mapping details has been added successfully." });
            }
            return View();
        }
        
        [HttpPost]
        public ActionResult DeleteProductSizeMapping(Guid ProductID, int SizeID)
        {

            if (ProductID != null)
            {
                _dbContext = new karrykartEntities();
                var productSizeMapping = _dbContext.ProductSizeMappings.Where(x => x.ProductID == ProductID && x.SizeID == SizeID).FirstOrDefault();
                _dbContext.Entry(productSizeMapping).State = EntityState.Deleted;

                var productPrice = _dbContext.ProductPrices.Where(x => x.ProductID == ProductID && x.SizeID == SizeID).FirstOrDefault();
                _dbContext.Entry(productPrice).State = EntityState.Deleted;

                var productSC = _dbContext.ProductShippings.Where(x => x.ProductID == ProductID && x.SizeID==SizeID).FirstOrDefault();
                _dbContext.Entry(productSC).State = EntityState.Deleted;

                _dbContext.SaveChanges();

                _dbContext = null;

                _logger.WriteLog(CommonHelper.MessageType.Success, "Product stock, price and size mapping details has been deleted successfully.", "DeleteProductSizeMapping", "ProductController", User.Identity.Name);

                return Json(new { messagetype = ApplicationMessages.Product.SUCCESS, message = "Product stock, price and size mapping details has been deleted successfully." });
            }

            return View();
        }

        

        void CreateViewBagForProduct()
        {
            _dbContext = new karrykartEntities();
            ViewBag.CategoryID = new SelectList(_dbContext.Categories.ToList(), "CategoryID", "Name");
            ViewBag.SubcategoryID = new SelectList(_dbContext.Subcategories.ToList(), "SCategoryID", "Name");
            ViewBag.BrandID = new SelectList(_dbContext.Brands.ToList(), "BrandID", "Name");

            _dbContext = null;

        }

        void CreateViewBagForStockPrice()
        {
            _dbContext = new karrykartEntities();
            ViewBag.UnitID = new SelectList(_dbContext.Units.ToList(), "UnitID", "Name");
            ViewBag.SizeTypeID = new SelectList(_dbContext.SizeTypes.ToList(), "SizeTypeID", "Name");
            ViewBag.CurrencyID = new SelectList(_dbContext.Currencies.ToList(), "CurrencyID", "Shortform");
            ViewBag.SizeID = new SelectList(_dbContext.Sizes.ToList(), "SizeID", "Name");
            _dbContext = null;

        }

        List<string> UploadImage(ProductModel model)
        {
            List<string> lstImageLink = new List<string>();
            if (model.Image1 != null)
                lstImageLink.Add(CommonHelper.UploadFile(model.Image1, _productImages));

            if (model.Image2 != null)
                lstImageLink.Add(CommonHelper.UploadFile(model.Image2, _productImages));

            if (model.Image3 != null)
                lstImageLink.Add(CommonHelper.UploadFile(model.Image3, _productImages));

            return lstImageLink;
        }
    }
    
Product - Details.cshtml
--------------------------

@{
    ViewBag.Title = "Details";
    Layout = "~/Views/Shared/_LayoutMaster.cshtml";
}
@model AppBanwao.KaryKart.Web.Models.ProductDetailsModel
<div class="row">

    <div class="col-md-12">
        <ul class="breadcrumb">
            <li><a href="@Url.Action("Index","Home")">Home</a></li>
            <li><a href="@Url.Action("Index","Product")">Product</a></li>
            <li class="active">Details</li>
        </ul>
    </div>
</div>
<div class="row">

    <div class="col-md-10">

        @using (Html.BeginForm("", "", FormMethod.Post, new { @class = "form-horizontal" }))
        {

            <h3>Product Details</h3>
            <hr />
            @Html.AntiForgeryToken()
            @Html.HiddenFor(m => m.ProductID)
            <div class="form-group">

                <label class="col-lg-3 control-label">Name</label>
                <div class="col-lg-7">
                    @Html.DisplayFor(m => m.Name)

                </div>
            </div>
            <div class="form-group">

                <label class="col-lg-3 control-label">Description</label>
                <div class="col-lg-7">
                    @Html.DisplayFor(m => m.Description)

                </div>
            </div>
            <div class="form-group">

                <label class="col-lg-3 control-label">Category</label>
                <div class="col-lg-7">
                    @Html.DisplayFor(m => m.CategoryName)

                </div>
            </div>

            <div class="form-group">

                <label class="col-lg-3 control-label">Sub Category</label>
                <div class="col-lg-7">
                    @Html.DisplayFor(m => m.SubCategoryName)

                </div>
            </div>

            <div class="form-group">

                <label class="col-lg-3 control-label">Brand</label>
                <div class="col-lg-7">
                    @Html.DisplayFor(m => m.BrandName)

                </div>
            </div>

            <div class="form-group">

                <label class="col-lg-3 control-label">Active</label>
                <div class="col-lg-7">
                    @if (Model.Active)
                    {
                        <span>Yes</span>
                    }
                    else
                    {
                        {
                            <span>No</span>
                        }
                    }

                </div>
            </div>



            <h3>Product Features & Image Details</h3>
            <hr />
            <div class="form-group">

                <label class="col-lg-3 control-label">Features</label>
                <div class="col-lg-7">

                    @foreach (var feature in Model.Features)
                    {
                        <i class="fa fa-check"></i> <span>@feature.Feature</span><br />
                    }


                </div>
            </div>

            <div class="form-group">



                <label class="col-lg-3 control-label">Images</label><br />
                <div class="col-lg-7">
                    @foreach (var imgLink in Model.Images)
                    {
                        <img src="@Url.Content(imgLink.ImageLink)" class="img img-responsive" style="width:20%" />
                    }
                </div>

            </div>



            <h3>Product Stock & Price Details</h3>
            <hr />

            <div class="form-group">


                <div class="col-lg-10">
                    <table class="table table-striped table-hover ">
                        <thead>
                            <tr>

                                <th>Size Name</th>
                                <th>Unit Name</th>
                                <th>Size Type</th>
                                <th>Price (per unit)</th>
                                <th>Shipping Cost (per unit)</th>
                                <th>Stock</th>
                           </tr>
                        </thead>
                        <tbody>
                            @foreach (var row in Model.ProductSizeMappings)
                            {
                                <tr>
                                    <td>@row.SizeName </td>
                                    <td>@row.UnitName</td>
                                    <td>@row.SizeTypeName</td>
                                    <td>@Model.Prices.Where(x => x.SizeID == row.SizeID).FirstOrDefault().Price</td>
                                    <td>@Model.ShippingDetails.Where(x => x.SizeID == row.SizeID).FirstOrDefault().Cost</td>
                                    <td>@row.Stock</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                   

                </div>
            </div>


            <div class="form-group">
                <div class="col-lg-10">
                    <a href="@Url.Action("Edit", "Product", new { id = Model.ProductID })" class="btn btn-success bluebutton">Edit Product Details <i class="fa fa-edit"></i></a>
                    
                    <hr />
                    <a href="@Url.Action("Index","Category")" class="btn btn-danger">Back <i class="fa fa-backward"></i> </a>
                </div>
            </div>

        }
    </div>
</div>





