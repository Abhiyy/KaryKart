ProductController.cs
----------------------

using AppBanwao.KarryKart.Model;
using AppBanwao.KaryKart.Web.Helpers;
using AppBanwao.KaryKart.Web.Models;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data.Entity;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace AppBanwao.KaryKart.Web.Controllers
{
    public class ProductController : BaseController
    {
        //
        // GET: /Product/
        string _productImages = ConfigurationManager.AppSettings["ProductDirectory"].ToString();


        ProductHelper _productHelper = null;

        public ActionResult Index()
        {
            try
            {
                _productHelper = new ProductHelper();

                return View(_productHelper.GetAllProducts());
            }
            catch (Exception ex)
            {
                return View();
            }

        }

        public ActionResult Details(Guid id)
        {
            using (_dbContext = new karrykartEntities())
            {
                _productHelper = new ProductHelper();
                return View(_productHelper.GetProduct(id));
            }
            return View();
        }

        public ActionResult Create() {
            CreateViewBagForProduct();
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create(ProductModel model)
        {
            if (ModelState.IsValid)
            {
                using (_dbContext = new karrykartEntities())
                {
                    var product = new Product()
                    {
                        Active = model.Active,
                        CategoryID = model.CategoryID,
                        CreatedBy = User.Identity.Name,
                        UpdatedBy = User.Identity.Name,
                        Description = model.Description,
                        Name = model.Name,
                        ProductID = Guid.NewGuid(),
                        SubCategoryID = model.SubCategoryID,
                        BrandID = model.BrandID,
                        CreatedOn = DateTime.Now,
                        UpdatedOn = DateTime.Now

                    };
                    _dbContext.Products.Add(product);
                    _dbContext.SaveChanges();
                    _logger.WriteLog(CommonHelper.MessageType.Success, "Product created successfully with name=" + product.ProductID, "Create", "ProductController", User.Identity.Name);
                    return RedirectToAction("AddImageFeatureDetails", "Product", new { id = product.ProductID });
                }
            
            }
            CreateViewBagForProduct();
            return View();
        }

        public ActionResult AddImageFeatureDetails(Guid id)
        {
            using (_dbContext = new karrykartEntities())
            {
                var product = _dbContext.Products.Find(id);
                return View(new ProductModel() { ProductID = product.ProductID, Name = product.Name });
            
            }
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddImageFeatureDetails(ProductModel model)
        {
            
            using (_dbContext = new karrykartEntities())
            {
                    if (!(String.IsNullOrEmpty(model.Features)))
                    {
                        foreach (var featureText in model.Features.Split(';'))
                        {
                            _dbContext.ProductFeatures.Add(new ProductFeature() { Feature = featureText, ProductID = model.ProductID });
                        }
                    }

                    var lstImages = UploadImage(model);

                    foreach (var image in lstImages)
                    {
                        if (!String.IsNullOrEmpty(image))
                        {
                            _dbContext.ProductImages.Add(new ProductImage() {ImageID=Guid.NewGuid(), ImageLink = image, ProductID = model.ProductID });
                            _dbContext.SaveChanges();
                        }
                    }
                    _logger.WriteLog(CommonHelper.MessageType.Success, "Product imgaes and features added successfully with name=" + model.ProductID, "Create", "ProductController", User.Identity.Name);
                    return RedirectToAction("AddStockPrice", "Product", new { id = model.ProductID });
            }

            return View(model);
        }
        
        public ActionResult AddStockPrice(Guid id)
        {
            using (_dbContext = new karrykartEntities())
            {
                var product = _dbContext.Products.Find(id);
                CreateViewBagForStockPrice();
                return View(new ProductStockPriceModel() { ProductID = product.ProductID, Name = product.Name });
            }
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddStockPrice(ProductStockPriceModel model)
        {
            if (ModelState.IsValid)
            {
                using (_dbContext = new karrykartEntities())
                {
                    var productSizeMapping = new ProductSizeMapping() { ProductID = model.ProductID, SizeID = model.SizeID, UnitID = model.UnitID, Stock = model.Stock };
                    _dbContext.ProductSizeMappings.Add(productSizeMapping);

                    var productprice = new ProductPrice() { CurrencyID = model.CurrencyID, ProductID = model.ProductID, SizeID = model.SizeID, Price = Convert.ToDecimal(model.Price) };
                    _dbContext.ProductPrices.Add(productprice);

                    var productShipping = new ProductShipping() { ProductID = model.ProductID, SizeID = model.SizeID, Cost = Convert.ToDecimal(model.ShippingCost) };
                    _dbContext.ProductShippings.Add(productShipping);
                    _dbContext.SaveChanges();
                    _logger.WriteLog(CommonHelper.MessageType.Success, "Product Stock and price added successfully with ID=" + model.Name, "AddStockPrice", "ProductController", User.Identity.Name);
                    return RedirectToAction("Index", "Product");
                }
            }
            CreateViewBagForStockPrice();
            return View();

        }

        [HttpGet]
        public JsonResult GetCategories()
        {
            _dbContext = new karrykartEntities();
            var categories = _dbContext.Categories.Select(x => new { x.CategoryID, x.Name }).ToList();
            _dbContext = null;
            return Json(categories, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public JsonResult GetBrands()
        {
            _dbContext = new karrykartEntities();
            var brands = _dbContext.Brands.Select(x => new { x.BrandID, x.Name }).ToList();
            _dbContext = null;
            return Json(brands, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public JsonResult GetSubCategories(int id = -1) // its a GET, not a POST
        {
            _dbContext = new karrykartEntities();
            if (id != -1)
            {
                var subcategories = _dbContext.Subcategories.Where(x => x.CategoryID == id).Select(x => new { x.SCategoryID, x.Name }).ToList();
                _dbContext = null;
                return Json(subcategories, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var subcategories = _dbContext.Subcategories.Select(x => new { x.SCategoryID, x.Name }).ToList();
                _dbContext = null;
                return Json(subcategories, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpGet]
        public JsonResult GetSizes(int id) // its a GET, not a POST
        {
            _dbContext = new karrykartEntities();
            var sizes = _dbContext.Sizes.Where(x => x.SizeTypeID == id).Select(x => new { x.SizeID, x.Name }).ToList();
            _dbContext = null;
            return Json(sizes, JsonRequestBehavior.AllowGet);
        }
        
        public ActionResult Edit(Guid id)
        {
            return View();
        }

        [HttpPost]
        public ActionResult EditBasicProductDetails(ProductDetailsModel model)
        {
            if (model.ProductID != Guid.Empty)
            { 
                _dbContext = new karrykartEntities();
                var product = _dbContext.Products.Find(model.ProductID);
                if (product != null)
                {
                    product.Active = model.Active;
                    product.BrandID = model.BrandID;
                    product.CategoryID = model.CategoryID;
                    product.SubCategoryID = model.SubCategoryID;
                    product.Description = model.Description;
                    product.Name = model.Name;
                    product.UpdatedBy = User.Identity.Name;
                    product.UpdatedOn = DateTime.Now;
                    _dbContext.Entry(product).State = EntityState.Modified;
                    _dbContext.SaveChanges();
                    _logger.WriteLog(CommonHelper.MessageType.Success, "Basic product details updated successfully with Name=" + model.Name, "EditBasicProductDetails", "ProductController", User.Identity.Name);

                    return Json(new { messagetype = ApplicationMessages.Product.SUCCESS, message = "Basic product details updated successfully." });
                }
            }
            return View();
        }

        [HttpPost]
        public ActionResult RemoveProductFeature(Guid ProductID, int FeatureID)
        {

            _dbContext = new karrykartEntities();

            var feature = _dbContext.ProductFeatures.Where(x => x.FeatureID == FeatureID && x.ProductID == ProductID).FirstOrDefault();

            if (feature != null)
            {
                _dbContext.Entry(feature).State = EntityState.Deleted;
                _dbContext.SaveChanges();
                _logger.WriteLog(CommonHelper.MessageType.Success, "Product feature deleted successfully with id=" + FeatureID, "RemoveProductFeature", "ProductController", User.Identity.Name);

                return Json(new { messagetype = ApplicationMessages.Product.SUCCESS, message = "Product feature removed successfully." });
            }

            return View();
        }
        void CreateViewBagForProduct()
        {
            _dbContext = new karrykartEntities();
            ViewBag.CategoryID = new SelectList(_dbContext.Categories.ToList(), "CategoryID", "Name");
            ViewBag.SubcategoryID = new SelectList(_dbContext.Subcategories.ToList(), "SCategoryID", "Name");
            ViewBag.BrandID = new SelectList(_dbContext.Brands.ToList(), "BrandID", "Name");

            _dbContext = null;

        }

        void CreateViewBagForStockPrice()
        {
            _dbContext = new karrykartEntities();
            ViewBag.UnitID = new SelectList(_dbContext.Units.ToList(), "UnitID", "Name");
            ViewBag.SizeTypeID = new SelectList(_dbContext.SizeTypes.ToList(), "SizeTypeID", "Name");
            ViewBag.CurrencyID = new SelectList(_dbContext.Currencies.ToList(), "CurrencyID", "Shortform");
            ViewBag.SizeID = new SelectList(_dbContext.Sizes.ToList(), "SizeID", "Name");
            _dbContext = null;

        }

        List<string> UploadImage(ProductModel model)
        {
            List<string> lstImageLink = new List<string>();
            if (model.Image1 != null)
                lstImageLink.Add( CommonHelper.UploadFile(model.Image1, _productImages));

            if (model.Image2 != null)
                lstImageLink.Add(CommonHelper.UploadFile(model.Image2, _productImages));

            if (model.Image3 != null)
                lstImageLink.Add(CommonHelper.UploadFile(model.Image3, _productImages));
            
            return lstImageLink;
        }
    }

}

ProductCtrl.js
-----------------------------

app.controller("ProductController", ['$scope', '$http', '$window', '$location', function ($scope, $http, $window, $location) {
    var apiURL = 'http://localhost:53445/api/';

    var product;
    $scope.basicDetailsEditing = false;
    // var product = ProductService.getProduct($location.absUrl().substring(($location.absUrl().lastIndexOf("/") + 1)));//$http.get(apiURL + "product?id=" + $location.absUrl().substring(($location.absUrl().lastIndexOf("/") + 1))); //ProductService.GetProduct(id);
    // console.log(product["ProductID"]);
    apiURL += "product?id=" + $location.absUrl().substring(($location.absUrl().lastIndexOf("/") + 1));//$http.get(apiURL + "product?id=" + $location.absUrl().substring(($location.absUrl().lastIndexOf("/") + 1));
    $http({
        method: "GET",
        url: apiURL
    }).success(function (data, status, header, config) {
        $scope.product = data;
    });
    
    $scope.categories;
    $scope.subcategories;
    $scope.brands;

    $http.get("/Product/GetCategories").success(function (data) {
        $scope.categories = data;
    }).error(function (status) {
        //  alert(status);
    });

    $http.get("/Product/GetBrands").success(function (data) {
        $scope.brands = data;
    }).error(function (status) {
        //  alert(status);
    });

    $http.get("/Product/GetSubCategories").success(function (data) {
        $scope.subcategories = data;
    }).error(function (status) {
        //  alert(status);
    });

    $http({
        method: "GET",
        url: apiURL
    }).success(function (data, status, header, config) {
        $scope.product = data;
        angular.forEach($scope.product.Features, function (obj) {
            obj["showEdit"] = true;
        })
    });

      
    $scope.editBasicDetails = function () {
        $scope.basicDetailsEditing = true;
    }
    $scope.cancelBasicDetails = function () {
        $scope.basicDetailsEditing = false;
    }
    $scope.updateBasicDetails = function () {
        var basicproductDetails = {
            "ProductID": $scope.product.ProductID,
            "Name": $scope.product.Name,
            "Description": $scope.product.Description,
            "CategoryID": $scope.product.CategoryID,
            "SubCategoryID": $scope.product.SubCategoryID,
            "BrandID": $scope.product.BrandID,
            "Active": $scope.product.Active
        };

        $http.post("/Product/EditBasicProductDetails", { model: basicproductDetails }).success(function (responseData) {
            if (responseData.messagetype = "success") {
                alert(responseData.message);
                $scope.basicDetailsEditing = false;
            } else {
                alert(responseData.message);
            }
        }).error(function (responseData) {
            console.log("Error !" + responseData);
        });
    };


    $scope.deleteProductFeature = function (id) {
        $http.post("/Product/RemoveProductFeature", { ProductID: $scope.product.ProductID, FeatureID: id }).success(function (responseData) {
            if (responseData.messagetype = "success") {
                alert(responseData.message);
            } else {
                alert(responseData.message);
            }
        }).error(function (responseData) {
            console.log("Error !" + responseData);
        });
    };

    $scope.toggleEdit = function (feature) {
        feature.showEdit = feature.showEdit ? false : true;
    };


}]);

//app.service('ProductService', ['$http', function ($http, $scope) {
//    var apiURL = 'http://localhost:13518/api';

//    var product = {};

//    this.getProduct = function (id, $scope) {
//        apiURL += "product?id=" + id;
//        return $http({
//            method: "GET",
//            url: apiURL,
//            headers: { 'Content-Type': 'application/json' }
//        }).then(function successCallback(response) {
//            // this callback will be called asynchronously
//            // when the response is available
//            return response.data;
//            // return product;
//            //  console.log(product);
//        }, function errorCallback(response) {
//            //console.log(response);
//            // called asynchronously if an error occurs
//            // or server returns response with an error status.
//        });
//        //  console.log(product);

//    };
//}]);


ProductHelper.cs
--------------------------
using AppBanwao.KarryKart.Model;
using AppBanwao.KaryKart.Web.Models;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Data.Entity.Core.Objects;
using System.Linq;
using System.Web;

namespace AppBanwao.KaryKart.Web.Helpers
{

    public class ProductHelper
    {

        public ApiHelper _apiHelper = null;

        public ProductHelper()
        {
            _apiHelper = new ApiHelper();
        }

        public IList<ProductDetailsModel> GetAllProducts()
        {
            var productList = _apiHelper.DeserializeToList<ProductDetailsModel>(_apiHelper.SendRequest("Product"));

            if(productList==null)
                productList = new List<ProductDetailsModel>();

            return productList;
        }

        public ProductDetailsModel GetProduct(Guid id)
        {

            var product = JsonConvert.DeserializeObject<ProductDetailsModel>(_apiHelper.SendRequest("Product?id=" + id));

            return product;
        }

    }
}

Edit.cshtml
----------------------

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_LayoutMaster.cshtml";
}
<link href="~/Content/kendo/2017.1.118/kendo.common.min.css" rel="stylesheet" />
<link href="~/Content/kendo/2017.1.118/kendo.default.min.css" rel="stylesheet" />
<script src="http://kendo.cdn.telerik.com/2017.1.118/js/kendo.all.min.js"></script>
<script type="text/javascript">

    //$(document).ready(function () {
    //    // create Editor from textarea HTML element with default set of tools
    //    $("#productDescription").kendoEditor({
    //        resizable: {
    //            content: true,
    //            toolbar: true
    //        }
    //    });
    //});
</script>
<script src="~/Scripts/App/ProductCtrl.js"></script>

<div class="row">

    <div class="col-md-12">
        <ul class="breadcrumb">
            <li><a href="@Url.Action("Index","Home")">Home</a></li>
            <li><a href="@Url.Action("Index","Product")">Product</a></li>
            <li class="active">Edit</li>
        </ul>
    </div>
</div>

<div class="row">
    <div class="col-md-10" ng-controller="ProductController">
        <h3>Product Details</h3>
        <hr />

        <form name="formBasicdetails" class="form-horizontal">
            <div class="form-group">

                <label class="col-lg-3 control-label" for="product.Name">Name</label>
                <div class="col-lg-7">
                    <input type="text" ng-disabled="!basicDetailsEditing" ng-model="product.Name" placeholder="e.g Arhar dal, chocolate etc." name="productName" class="form-control" />

                </div>
            </div>
            
            
            <div class="form-group">

                <label class="col-lg-3 control-label" for="product.Description">Description</label>
                <div class="col-lg-7">
                    <textarea ng-disabled="!basicDetailsEditing" ng-model="product.Description" placeholder="e.g Enter product details." name="productDescription" id="productDescription" class="form-control" ></textarea>

                </div>
            </div>
            
            <div class="form-group">

                <label class="col-lg-3 control-label" for="product.CategoryID">Category</label>
                <div class="col-lg-7">
                 <select ng-disabled="!basicDetailsEditing" ng-options="c.CategoryID as c.Name for c in categories" ng-init="product.CategoryID" ng-model="product.CategoryID" class="form-control" name="productCategory" id="productCategory"></select>
                </div>
            </div>
            
            <div class="form-group">

                <label class="col-lg-3 control-label" for="product.SubCategoryID">Sub-Category</label>
                <div class="col-lg-7">
                    
                    <select ng-disabled="!basicDetailsEditing" ng-options="sc.SCategoryID as sc.Name for sc in subcategories" ng-model="product.SubCategoryID" class="form-control" name="productSubCategory" id="productSubCategory"></select>

                </div>
            </div>
            
            <div class="form-group">

                <label class="col-lg-3 control-label" for="product.BrandID">Brand</label>
                <div class="col-lg-7">
                    <select ng-disabled="!basicDetailsEditing" ng-options="b.BrandID as b.Name for b in brands" ng-model="product.BrandID" class="form-control" name="productBrand" id="productBrand"></select>

                </div>
            </div>
            
            <div class="form-group">

                <label class="col-lg-3 control-label" for="product.Active">Active</label>
                <div class="col-lg-7">
                    <input type="checkbox" ng-disabled="!basicDetailsEditing" ng-model="product.Active" name="productActive" id="productActive" />

                </div>
            </div>

            <div class="form-group">
                <div class="col-lg-7 col-lg-offset-3">
                    <button ng-click="editBasicDetails()" ng-hide="basicDetailsEditing" class="btn btn-info">Edit Basic Details <i class="fa fa-edit"></i></button>
                    <button ng-click="updateBasicDetails()" ng-show="basicDetailsEditing" class="btn btn-success">Update <i class="fa fa-check-circle"></i></button>
                    <button ng-click="cancelBasicDetails()" ng-show="basicDetailsEditing" class="btn btn-danger">Cancel <i class="fa fa-close"></i></button>
                   
                    @*<a href="@Url.Action("Index","Category")" class="btn btn-danger">Back <i class="fa fa-backward"></i> </a>*@
                </div>
            </div>
        </form>

       <hr/>
        <h3>Product Features and Images</h3>
         <hr />
        
        <form name="formproductFeatureImages" class="form-horizontal">
            <div class="form-group">

                <label class="col-lg-3 control-label" for="product.Features">Features</label>
                <div class="col-lg-7">
                     
                    <table class="table table-striped table-hover">
                        <tr><th>#</th> <th>Feature Description</th><td>Actions</td></tr>
                        <tr ng-repeat="x in product.Features">
                            <td>{{ x.FeatureID }}</td>
                            <td>
                                <span ng-show="emp.showEdit">
                                    {{ x.Feature }}
                                </span>
                                <input type="text" ng-model="product.EditFeatureText" ng-show="!emp.showEdit" class="form-control">
                           </td>
                            <td>
                            <button class="btn btn-info btn-xs" id="btnEditFeature" title="Edit Feature" ng-click="editProductFeature('{{ x.FeatureID }}')"> <i class="fa fa-pencil"></i> </button> <button class="btn btn-danger btn-xs" title="Remove Feature" id="btnDelete" ng-click="deleteProductFeature( x.FeatureID )"> <i class="fa fa-remove"></i> </button></td>
                        </tr>
                    </table>
                    @*<input type="text" ng-disabled="!basicDetailsEditing" ng-model="product.Name" placeholder="e.g Arhar dal, chocolate etc." name="productName" class="form-control" />*@

                </div>
            </div>
            
            
            

            <div class="form-group">
                <div class="col-lg-7 col-lg-offset-3">
                    <button ng-click="editBasicDetails()" ng-hide="basicDetailsEditing" class="btn btn-info">Edit Basic Details <i class="fa fa-edit"></i></button>
                    <button ng-click="updateBasicDetails()" ng-show="basicDetailsEditing" class="btn btn-success">Update <i class="fa fa-check-circle"></i></button>
                    <button ng-click="cancelBasicDetails()" ng-show="basicDetailsEditing" class="btn btn-danger">Cancel <i class="fa fa-close"></i></button>
                   
                    @*<a href="@Url.Action("Index","Category")" class="btn btn-danger">Back <i class="fa fa-backward"></i> </a>*@
                </div>
            </div>
        </form>
    </div>
</div>

